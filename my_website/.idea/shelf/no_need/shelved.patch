Index: ../fyi_main2_2_1/android/app/src/debug/AndroidManifest.xml
===================================================================
--- ../fyi_main2_2_1/android/app/src/debug/AndroidManifest.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/app/src/debug/AndroidManifest.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,7 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="fyi.vit">
-    <!-- Flutter needs it to communicate with the running application
-         to allow setting breakpoints, to provide hot reload, etc.
-    -->
-    <uses-permission android:name="android.permission.INTERNET"/>
-</manifest>
Index: ../fyi_main2_2_1/android/app/src/main/kotlin/com/example/fyi_main2_2_1/MainActivity.kt
===================================================================
--- ../fyi_main2_2_1/android/app/src/main/kotlin/com/example/fyi_main2_2_1/MainActivity.kt	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/app/src/main/kotlin/com/example/fyi_main2_2_1/MainActivity.kt	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,6 +0,0 @@
-package fyi.vit
-
-import io.flutter.embedding.android.FlutterActivity
-
-class MainActivity: FlutterActivity() {
-}
Index: ../fyi_main2_2_1/android/app/src/main/res/drawable/launch_background.xml
===================================================================
--- ../fyi_main2_2_1/android/app/src/main/res/drawable/launch_background.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/app/src/main/res/drawable/launch_background.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Modify this file to customize your launch splash screen -->
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:drawable="@android:color/white" />
-
-    <!-- You can insert your own image assets here -->
-    <!-- <item>
-        <bitmap
-            android:gravity="center"
-            android:src="@mipmap/launch_image" />
-    </item> -->
-</layer-list>
Index: ../fyi_main2_2_1/android/app/src/main/res/values/strings.xml
===================================================================
--- ../fyi_main2_2_1/android/app/src/main/res/values/strings.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/app/src/main/res/values/strings.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="app_name">fyi.vit</string>
-
-    <!-- Replace "000000000000" with your Facebook App ID here. -->
-    <string name="facebook_app_id">333134431167506</string>
-
-    <!--
-      Replace "000000000000" with your Facebook App ID here.
-      **NOTE**: The scheme needs to start with `fb` and then your ID.
-    -->
-    <string name="fb_login_protocol_scheme">fb333134431167506</string>
-</resources>
\ No newline at end of file
Index: ../fyi_main2_2_1/android/app/src/main/res/values/styles.xml
===================================================================
--- ../fyi_main2_2_1/android/app/src/main/res/values/styles.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/app/src/main/res/values/styles.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <!-- Theme applied to the Android Window while the process is starting -->
-    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
-        <!-- Show a splash screen on the activity. Automatically removed when
-             Flutter draws its first frame -->
-        <item name="android:windowBackground">@drawable/launch_background</item>
-    </style>
-    <!-- Theme applied to the Android Window as soon as the process has started.
-         This theme determines the color of the Android Window while your
-         Flutter UI initializes, as well as behind your Flutter UI while its
-         running.
-         
-         This Theme is only used starting with V2 of Flutter's Android embedding. -->
-    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
-        <item name="android:windowBackground">@android:color/white</item>
-    </style>
-</resources>
Index: ../fyi_main2_2_1/android/app/src/main/AndroidManifest.xml
===================================================================
--- ../fyi_main2_2_1/android/app/src/main/AndroidManifest.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/app/src/main/AndroidManifest.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,70 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="fyi.vit">
-    <!-- io.flutter.app.FlutterApplication is an android.app.Application that
-         calls FlutterMain.startInitialization(this); in its onCreate method.
-         In most cases you can leave this as-is, but you if you want to provide
-         additional functionality it is fine to subclass or reimplement
-         FlutterApplication and put your custom class here. -->
-    <uses-permission android:name="android.permission.INTERNET" />
-
-    <application
-        android:name="io.flutter.app.FlutterApplication"
-        android:label="fyi.vit"
-        android:icon="@mipmap/ic_launcher">
-        <activity
-            android:name=".MainActivity"
-            android:launchMode="singleTop"
-            android:theme="@style/LaunchTheme"
-            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
-            android:hardwareAccelerated="true"
-            android:windowSoftInputMode="adjustResize">
-            <!-- Specifies an Android theme to apply to this Activity as soon as
-                 the Android process has started. This theme is visible to the user
-                 while the Flutter UI initializes. After that, this theme continues
-                 to determine the Window background behind the Flutter UI. -->
-            <meta-data
-              android:name="io.flutter.embedding.android.NormalTheme"
-              android:resource="@style/NormalTheme"
-              />
-            <!-- Displays an Android View that continues showing the launch screen
-                 Drawable until Flutter paints its first frame, then this splash
-                 screen fades out. A splash screen is useful to avoid any visual
-                 gap between the end of Android's launch screen and the painting of
-                 Flutter's first frame. -->
-            <meta-data
-              android:name="io.flutter.embedding.android.SplashScreenDrawable"
-              android:resource="@drawable/launch_background"
-              />
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-        <!-- Facebook Login configuration -->
-        <meta-data android:name="com.facebook.sdk.ApplicationId"
-            android:value="@string/facebook_app_id"/>
-
-        <activity android:name="com.facebook.FacebookActivity"
-            android:configChanges=
-                "keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:label="@string/app_name"
-            android:exported="true"
-            />
-        <activity
-            android:name="com.facebook.CustomTabActivity"
-            android:exported="true">
-        <intent-filter>
-        <action android:name="android.intent.action.VIEW" />
-        <category android:name="android.intent.category.DEFAULT" />
-        <category android:name="android.intent.category.BROWSABLE" />
-        <data android:scheme="@string/fb_login_protocol_scheme" />
-        </intent-filter>
-        </activity>
-
-        <!-- Don't delete the meta-data below.
-             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
-        <meta-data
-            android:name="flutterEmbedding"
-            android:value="2" />
-    </application>
-</manifest>
Index: ../fyi_main2_2_1/android/app/src/profile/AndroidManifest.xml
===================================================================
--- ../fyi_main2_2_1/android/app/src/profile/AndroidManifest.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/app/src/profile/AndroidManifest.xml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,7 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="fyi.vit">
-    <!-- Flutter needs it to communicate with the running application
-         to allow setting breakpoints, to provide hot reload, etc.
-    -->
-    <uses-permission android:name="android.permission.INTERNET"/>
-</manifest>
Index: ../fyi_main2_2_1/android/app/build.gradle
===================================================================
--- ../fyi_main2_2_1/android/app/build.gradle	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/app/build.gradle	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,93 +0,0 @@
-def localProperties = new Properties()
-def localPropertiesFile = rootProject.file('local.properties')
-if (localPropertiesFile.exists()) {
-    localPropertiesFile.withReader('UTF-8') { reader ->
-        localProperties.load(reader)
-    }
-}
-
-def flutterRoot = localProperties.getProperty('flutter.sdk')
-if (flutterRoot == null) {
-    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
-}
-
-def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
-if (flutterVersionCode == null) {
-    flutterVersionCode = '1'
-}
-
-def flutterVersionName = localProperties.getProperty('flutter.versionName')
-if (flutterVersionName == null) {
-    flutterVersionName = '1.0'
-}
-
-apply plugin: 'com.android.application'
-apply plugin: 'kotlin-android'
-apply plugin: 'com.google.gms.google-services'
-
-apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
-def keystoreProperties = new Properties()
-def keystorePropertiesFile = rootProject.file('key.properties')
-if (keystorePropertiesFile.exists()) {
-    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
-}
-android {
-    compileSdkVersion 29
-
-    sourceSets {
-        main.java.srcDirs += 'src/main/kotlin'
-    }
-
-    lintOptions {
-        disable 'InvalidPackage'
-    }
-
-    defaultConfig {
-        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
-        applicationId "fyi.vit"  //com.example.fyi_main2_2_1
-        minSdkVersion 16
-        targetSdkVersion 29
-        versionCode flutterVersionCode.toInteger()
-        versionName flutterVersionName
-        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
-        multiDexEnabled true
-    }
-    signingConfigs {
-        release {
-            keyAlias keystoreProperties['keyAlias']
-            keyPassword keystoreProperties['keyPassword']
-            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
-            storePassword keystoreProperties['storePassword']
-        }
-    }
-    buildTypes {
-        release {
-            // TODO: Add your own signing config for the release build.
-            // Signing with the debug keys for now, so `flutter run --release` works.
-            signingConfig signingConfigs.debug
-        }
-    }
-}
-
-flutter {
-    source '../..'
-}
-
-dependencies {
-    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
-    testImplementation 'junit:junit:4.12'
-    androidTestImplementation 'androidx.test:runner:1.1.1'
-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
-    implementation 'androidx.multidex:multidex:2.0.1'
-    implementation 'com.android.support:multidex:1.0.3'
-//    implementation 'com.google.firebase:firebase-auth:16.1.0'
-    implementation 'com.google.firebase:firebase-auth:17.0.0'
-    implementation 'com.facebook.android:facebook-login:[8.1)'
-    api 'com.facebook.android:facebook-login:5.5.1'
-
-
-}
-
-
-apply plugin: 'com.google.gms.google-services'
-apply plugin: 'com.android.application'
\ No newline at end of file
Index: ../fyi_main2_2_1/android/app/google-services.json
===================================================================
--- ../fyi_main2_2_1/android/app/google-services.json	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/app/google-services.json	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,64 +0,0 @@
-{
-  "project_info": {
-    "project_number": "213654932931",
-    "firebase_url": "https://fyi-vitc.firebaseio.com",
-    "project_id": "fyi-vitc",
-    "storage_bucket": "fyi-vitc.appspot.com"
-  },
-  "client": [
-    {
-      "client_info": {
-        "mobilesdk_app_id": "1:213654932931:android:1655aff2a5660c6b018176",
-        "android_client_info": {
-          "package_name": "fyi.vit"
-        }
-      },
-      "oauth_client": [
-        {
-          "client_id": "213654932931-75u962akpufh22em55ppnc03c6uulf8v.apps.googleusercontent.com",
-          "client_type": 1,
-          "android_info": {
-            "package_name": "fyi.vit",
-            "certificate_hash": "d60e44d42902f6e54f4101c0821a4d57830d41b0"
-          }
-        },
-        {
-          "client_id": "213654932931-orp6u1buccdgph7uq1jmn1t19uup7feh.apps.googleusercontent.com",
-          "client_type": 1,
-          "android_info": {
-            "package_name": "fyi.vit",
-            "certificate_hash": "ea6d2d02313955d4e8fd66c8fd8adef4cb932730"
-          }
-        },
-        {
-          "client_id": "213654932931-5g5a06om0hihs120v2m925qojnn47doe.apps.googleusercontent.com",
-          "client_type": 1,
-          "android_info": {
-            "package_name": "fyi.vit",
-            "certificate_hash": "1b2e1754921a29a050a2bf42340e737d7677b8ec"
-          }
-        },
-        {
-          "client_id": "213654932931-npjeavqmguh0qdmc66fi3o0gq9k0bom2.apps.googleusercontent.com",
-          "client_type": 3
-        }
-      ],
-      "api_key": [
-        {
-          "current_key": "AIzaSyAFn-sm0T_ivVdfEO0aT49f8f_0ryGY9ww"
-        }
-      ],
-      "services": {
-        "appinvite_service": {
-          "other_platform_oauth_client": [
-            {
-              "client_id": "213654932931-npjeavqmguh0qdmc66fi3o0gq9k0bom2.apps.googleusercontent.com",
-              "client_type": 3
-            }
-          ]
-        }
-      }
-    }
-  ],
-  "configuration_version": "1"
-}
\ No newline at end of file
Index: ../fyi_main2_2_1/android/gradle/wrapper/gradle-wrapper.properties
===================================================================
--- ../fyi_main2_2_1/android/gradle/wrapper/gradle-wrapper.properties	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/gradle/wrapper/gradle-wrapper.properties	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,6 +0,0 @@
-#Fri Jun 23 08:50:38 CEST 2017
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-5.6.2-all.zip
Index: ../fyi_main2_2_1/android/.gitignore
===================================================================
--- ../fyi_main2_2_1/android/.gitignore	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/.gitignore	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,11 +0,0 @@
-gradle-wrapper.jar
-/.gradle
-/captures/
-/gradlew
-/gradlew.bat
-/local.properties
-GeneratedPluginRegistrant.java
-
-# Remember to never publicly share your keystore.
-# See https://flutter.dev/docs/deployment/android#reference-the-keystore-from-the-app
-key.properties
Index: ../fyi_main2_2_1/android/build.gradle
===================================================================
--- ../fyi_main2_2_1/android/build.gradle	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/build.gradle	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,34 +0,0 @@
-buildscript {
-    ext.kotlin_version = '1.3.50'
-    repositories {
-        google()
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:3.5.0'
-        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
-        classpath 'com.google.gms:google-services:4.3.3'
-
-
-    }
-}
-
-allprojects {
-    repositories {
-        google()
-        jcenter()
-    }
-}
-
-rootProject.buildDir = '../build'
-subprojects {
-    project.buildDir = "${rootProject.buildDir}/${project.name}"
-}
-subprojects {
-    project.evaluationDependsOn(':app')
-}
-
-task clean(type: Delete) {
-    delete rootProject.buildDir
-}
Index: ../fyi_main2_2_1/android/gradle.properties
===================================================================
--- ../fyi_main2_2_1/android/gradle.properties	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/gradle.properties	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,4 +0,0 @@
-org.gradle.jvmargs=-Xmx1536M
-android.useAndroidX=true
-android.enableJetifier=true
-android.enableR8=true
Index: ../fyi_main2_2_1/android/settings.gradle
===================================================================
--- ../fyi_main2_2_1/android/settings.gradle	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/android/settings.gradle	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,25 +0,0 @@
-include ':app'
-
-def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
-def properties = new Properties()
-
-assert localPropertiesFile.exists()
-localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
-
-def flutterSdkPath = properties.getProperty("flutter.sdk")
-assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
-apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
-
-def flutterProjectRoot = rootProject.projectDir.parentFile.toPath()
-
-def plugins = new Properties()
-def pluginsFile = new File(flutterProjectRoot.toFile(), '.flutter-plugins')
-if (pluginsFile.exists()) {
-    pluginsFile.withReader('UTF-8') { reader -> plugins.load(reader) }
-}
-
-plugins.each { name, path ->
-    def pluginDirectory = flutterProjectRoot.resolve(path).resolve('android').toFile()
-    include ":$name"
-    project(":$name").projectDir = pluginDirectory
-}
\ No newline at end of file
Index: ../fyi_main2_2_1/.gitignore
===================================================================
--- ../fyi_main2_2_1/.gitignore	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/.gitignore	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,41 +0,0 @@
-# Miscellaneous
-*.class
-*.log
-*.pyc
-*.swp
-.DS_Store
-.atom/
-.buildlog/
-.history
-.svn/
-
-# IntelliJ related
-*.iml
-*.ipr
-*.iws
-.idea/
-
-# The .vscode folder contains launch configuration and tasks you configure in
-# VS Code which you may wish to be included in version control, so this line
-# is commented out by default.
-#.vscode/
-
-# Flutter/Dart/Pub related
-**/doc/api/
-**/ios/Flutter/.last_build_id
-.dart_tool/
-.flutter-plugins
-.flutter-plugins-dependencies
-.packages
-.pub-cache/
-.pub/
-/build/
-
-# Web related
-lib/generated_plugin_registrant.dart
-
-# Symbolication related
-app.*.symbols
-
-# Obfuscation related
-app.*.map.json
Index: ../fyi_main2_2_1/pubspec.yaml
===================================================================
--- ../fyi_main2_2_1/pubspec.yaml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/pubspec.yaml	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,101 +0,0 @@
-name: fyi_main2_2_1
-description: A new Flutter application.
-
-# The following line prevents the package from being accidentally published to
-# pub.dev using `pub publish`. This is preferred for private packages.
-publish_to: "none" # Remove this line if you wish to publish to pub.dev
-
-# The following defines the version and build number for your application.
-# A version number is three numbers separated by dots, like 1.2.43
-# followed by an optional build number separated by a +.
-# Both the version and the builder number may be overridden in flutter
-# build by specifying --build-name and --build-number, respectively.
-# In Android, build-name is used as versionName while build-number used as versionCode.
-# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
-# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
-# Read more about iOS versioning at
-# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
-version: 1.0.0+1
-
-environment:
-  sdk: ">=2.7.0 <3.0.0"
-
-dependencies:
-  flutter:
-    sdk: flutter
-
-  # The following adds the Cupertino Icons font to your application.
-  # Use with the CupertinoIcons class for iOS style icons.
-  cupertino_icons: ^1.0.0
-
-dev_dependencies:
-  flutter_test:
-    sdk: flutter
-
-  image_picker: ^0.6.7+11
-  carousel_pro: ^1.0.0
-  cloud_firestore: ^0.14.3
-  quill_delta: ^1.1.3
-  html_editor: ^1.0.1
-  dio: ^3.0.10
-  dio_flutter_transformer: ^3.0.2
-  rich_edit: ^0.1.1
-  font_awesome_flutter: ^8.10.0
-  flutter_keyboard_visibility: ^3.3.0
-  intl: ^0.16.1
-  firebase_core: ^0.5.2
-  firebase_auth: ^0.18.3
-  google_sign_in: ^4.5.6
-  path_provider: ^1.6.24
-  prompt_dialog: ^0.1.1
-  #  flutter_html: ^1.0.2
-  #  css_text: ^2.1.0
-  flutter_widget_from_html: ^0.5.1+4
-  flutter_facebook_auth: "^1.0.0"
-  flutter_spinkit: ^4.1.2+1
-  shared_preferences: ^0.5.12+4
-
-
-
-  #  cloud_firestore: ^0.14.1+2
-  #  firebase_core: ^0.5.0
-# For information on the generic Dart part of this file, see the
-# following page: https://dart.dev/tools/pub/pubspec
-
-# The following section is specific to Flutter.
-flutter:
-  # The following line ensures that the Material Icons font is
-  # included with your application, so that you can use the icons in
-  # the material Icons class.
-  uses-material-design: true
-
-  # To add assets to your application, add an assets section, like this:
-  assets:
-    - images/
-  #   - images/a_dot_ham.jpeg
-
-  # An image asset can refer to one or more resolution-specific "variants", see
-  # https://flutter.dev/assets-and-images/#resolution-aware.
-
-  # For details regarding adding assets from package dependencies, see
-  # https://flutter.dev/assets-and-images/#from-packages
-
-  # To add custom fonts to your application, add a fonts section here,
-  # in this "flutter" section. Each entry in this list should have a
-  # "family" key with the font family name, and a "fonts" key with a
-  # list giving the asset and other descriptors for the font. For
-  # example:
-  # fonts:
-  #   - family: Schyler
-  #     fonts:
-  #       - asset: fonts/Schyler-Regular.ttf
-  #       - asset: fonts/Schyler-Italic.ttf
-  #         style: italic
-  #   - family: Trajan Pro
-  #     fonts:
-  #       - asset: fonts/TrajanPro.ttf
-  #       - asset: fonts/TrajanPro_Bold.ttf
-  #         weight: 700
-  #
-  # For details regarding fonts from package dependencies,
-  # see https://flutter.dev/custom-fonts/#from-packages
Index: ../fyi_main2_2_1/README.md
===================================================================
--- ../fyi_main2_2_1/README.md	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/README.md	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
@@ -1,16 +0,0 @@
-# fyi_main2_2_1
-
-A new Flutter application.
-
-## Getting Started
-
-This project is a starting point for a Flutter application.
-
-A few resources to get you started if this is your first Flutter project:
-
-- [Lab: Write your first Flutter app](https://flutter.dev/docs/get-started/codelab)
-- [Cookbook: Useful Flutter samples](https://flutter.dev/docs/cookbook)
-
-For help getting started with Flutter, view our
-[online documentation](https://flutter.dev/docs), which offers tutorials,
-samples, guidance on mobile development, and a full API reference.
Index: ../fyi_main2_2_1/lib/html_editor.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>library html_editor;\r\n\r\nimport 'dart:convert';\r\nimport 'dart:io';\r\nimport 'package:flutter/foundation.dart';\r\nimport 'package:flutter/gestures.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:html_editor/local_server.dart';\r\nimport 'package:html_editor/pick_image.dart';\r\nimport 'package:path/path.dart' as p;\r\nimport 'package:webview_flutter/webview_flutter.dart';\r\nimport 'package:dio/dio.dart';\r\n\r\nString token =\r\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiMDlZWUpmRlQyblo5QU9jM3BvZDlHbnEwdWwwMiJ9LCJpYXQiOjE2MDE3MTQ0NzJ9.dLU-k1kJkEWNtJT9NhkciM-SJAZ-Fdrl1WZNrA24mR8\";\r\nFile _image;\r\nString testfd;\r\nString url =\r\n    \"https://us-central1-fyi-vitc.cloudfunctions.net//api/article/imageUpload\";\r\nFormData formData;\r\nString close='X';\r\nvar globresponse;\r\n\r\ntypedef void OnClik();\r\n\r\nclass HtmlEditor extends StatefulWidget {\r\n  final String value;\r\n  final double height;\r\n  final BoxDecoration decoration;\r\n  final bool useBottomSheet;\r\n  final String widthImage;\r\n  final bool showBottomToolbar;\r\n  final String hint;\r\n\r\n  HtmlEditor(\r\n      {Key key,\r\n      this.value,\r\n      this.height = 380,\r\n      this.decoration,\r\n      this.useBottomSheet = true,\r\n      this.widthImage = \"100%\",\r\n      this.showBottomToolbar = true,\r\n      this.hint})\r\n      : super(key: key);\r\n\r\n  @override\r\n  HtmlEditorState createState() => HtmlEditorState();\r\n}\r\n\r\nclass HtmlEditorState extends State<HtmlEditor> {\r\n  WebViewController _controller;\r\n  String text = \"\";\r\n  final Key _mapKey = UniqueKey();\r\n\r\n  int port = 5321;\r\n  LocalServer localServer;\r\n\r\n  @override\r\n  void initState() {\r\n    if (!Platform.isAndroid) {\r\n      initServer();\r\n    }\r\n    super.initState();\r\n  }\r\n\r\n  initServer() {\r\n    localServer = LocalServer(port);\r\n    localServer.start(handleRequest);\r\n  }\r\n\r\n  void handleRequest(HttpRequest request) {\r\n    try {\r\n      if (request.method == 'GET' &&\r\n          request.uri.queryParameters['query'] == \"getRawTeXHTML\") {\r\n      } else {}\r\n    } catch (e) {\r\n      print('Exception in handleRequest: $e');\r\n    }\r\n  }\r\n\r\n  void getHttp() async {\r\n    var dio = Dio();\r\n    // dio.transformer = FlutterTransformer(); // replace dio default transformer\r\n    print({_image.path});\r\n    print(_image);\r\n    String fileName = _image.path.split('/').last;\r\n    print(fileName);\r\n    try {\r\n      formData = FormData.fromMap({\r\n        \"image\": await MultipartFile.fromFile(_image.path, filename: fileName),\r\n      });\r\n      Response response = await dio.post(\r\n          \"https://us-central1-fyi-vitc.cloudfunctions.net//api/article/imageUpload\",\r\n          queryParameters: {\"x-auth-token\": token}, //?x-auth-token=$token\r\n          data: formData); //{\"image\": formData}\r\n      print(\"GETHHTTP fucntion print -> $response\");\r\n      globresponse = response;\r\n    } catch (e) {\r\n      print(e);\r\n      print(\"ERROR\");\r\n    }\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    if (_controller != null) {\r\n      _controller = null;\r\n    }\r\n    if (!Platform.isAndroid) {\r\n      localServer.close();\r\n    }\r\n    super.dispose();\r\n  }\r\n\r\n  _loadHtmlFromAssets() async {\r\n    final filePath = 'packages/html_editor/summernote/summernote.html';\r\n    _controller.loadUrl(\"http://localhost:$port/$filePath\");\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      height: widget.height,\r\n      decoration: widget.decoration ??\r\n          BoxDecoration(\r\n            borderRadius: BorderRadius.all(Radius.circular(4)),\r\n            border: Border.all(color: Color(0xffececec), width: 1),\r\n          ),\r\n      child: Container(\r\n        // height: 300,\r\n        child: Column(\r\n          children: <Widget>[\r\n            Expanded(\r\n              child: WebView(\r\n                key: _mapKey,\r\n                onWebResourceError: (e) {\r\n                  print(\"error ${e.description}\");\r\n                },\r\n                onWebViewCreated: (webViewController) {\r\n                  _controller = webViewController;\r\n\r\n                  if (Platform.isAndroid) {\r\n                    final filename =\r\n                        'packages/html_editor/summernote/summernote.html';\r\n                    _controller.loadUrl(\r\n                        \"file:///android_asset/flutter_assets/\" + filename);\r\n                  } else {\r\n                    _loadHtmlFromAssets();\r\n                  }\r\n                },\r\n                javascriptMode: JavascriptMode.unrestricted,\r\n                gestureNavigationEnabled: true,\r\n                gestureRecognizers: [\r\n                  Factory(\r\n                      () => VerticalDragGestureRecognizer()..onUpdate = (_) {}),\r\n                ].toSet(),\r\n                javascriptChannels: <JavascriptChannel>[\r\n                  getTextJavascriptChannel(context)\r\n                ].toSet(),\r\n                onPageFinished: (String url) {\r\n                  if (widget.hint != null) {\r\n                    setHint(widget.hint);\r\n                  } else {\r\n                    setHint(\"\");\r\n                  }\r\n\r\n                  setFullContainer();\r\n                  if (widget.value != null) {\r\n                    setText(widget.value);\r\n                  }\r\n                },\r\n              ),\r\n            ),\r\n            widget.showBottomToolbar\r\n                ? Divider()\r\n                : Container(\r\n                    height: 1,\r\n                  ),\r\n            widget.showBottomToolbar\r\n                ? Container(\r\n                    decoration: BoxDecoration(\r\n                      color: Color(0xff808080),\r\n                    ),\r\n                    child: Padding(\r\n                      padding: const EdgeInsets.only(\r\n                          left: 4.0, right: 4, bottom: 2, top: 2),\r\n                      child: Padding(\r\n                        padding: const EdgeInsets.all(8.0),\r\n                        child: FlatButton(\r\n                          onPressed: (){\r\n                            widget.useBottomSheet\r\n                                ? bottomSheetPickImage(context)\r\n                                : dialogPickImage(context);\r\n                          },\r\n                          child: Row(\r\n                            mainAxisAlignment: MainAxisAlignment.center,\r\n                            children: <Widget>[\r\n                              widgetIcon(Icons.image,\"\",\r\n                                  onKlik: () {\r\n                                widget.useBottomSheet\r\n                                    ? bottomSheetPickImage(context)\r\n                                    : dialogPickImage(context);\r\n                              }),\r\n                              Text(\"Image from device\",style: TextStyle(fontSize: 20,fontWeight: FontWeight.w400),),\r\n                              // FlatButton(onPressed: (){\r\n                              //   setState(() {\r\n                              //     if(close==\"X\")\r\n                              //       {\r\n                              //         close=\"-\";\r\n                              //\r\n                              //       }\r\n                              //     else{\r\n                              //       close='X';\r\n                              //     }\r\n                              //   });\r\n                              // }, child: Text(close))\r\n                            ],\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  )\r\n                : Padding(\r\n                    padding: const EdgeInsets.only(\r\n                        left: 4.0, right: 4, bottom: 2, top: 2),\r\n                    child: Container(\r\n                      decoration: BoxDecoration(\r\n                        color: Color(0xff808080),\r\n                      ),\r\n                      child: Padding(\r\n                        padding: const EdgeInsets.all(8.0),\r\n                        child: Row(\r\n                          mainAxisAlignment: MainAxisAlignment.spaceAround,\r\n                          children: <Widget>[\r\n                            widgetIcon(Icons.content_copy, \"Copy\",\r\n                                onKlik: () async {\r\n                              String data = await getText();\r\n                              Clipboard.setData(new ClipboardData(text: data));\r\n                            }),\r\n                            Row(\r\n                              children: [\r\n                                widgetIcon(\r\n                                    Icons.keyboard_arrow_up_outlined, \"\"),\r\n                                Text(\r\n                                  \"SCROLL BAR\",\r\n                                  style: TextStyle(\r\n                                      fontWeight: FontWeight.w800,\r\n                                      fontSize: 17,\r\n                                      color: Colors.black38),\r\n                                ),\r\n                                widgetIcon(\r\n                                    Icons.keyboard_arrow_up_outlined, \"\"),\r\n                              ],\r\n                            ),\r\n                            widgetIcon(Icons.content_paste, \"Paste\",\r\n                                onKlik: () async {\r\n                              ClipboardData data =\r\n                                  await Clipboard.getData(Clipboard.kTextPlain);\r\n\r\n                              String txtIsi = data.text\r\n                                  .replaceAll(\"'\", '\\\\\"')\r\n                                  .replaceAll('\"', '\\\\\"')\r\n                                  .replaceAll(\"[\", \"\\\\[\")\r\n                                  .replaceAll(\"]\", \"\\\\]\")\r\n                                  .replaceAll(\"\\n\", \"<br/>\")\r\n                                  .replaceAll(\"\\n\\n\", \"<br/>\")\r\n                                  .replaceAll(\"\\r\", \" \")\r\n                                  .replaceAll('\\r\\n', \" \");\r\n                              String txt = \"\\$('.note-editable').append( '\" +\r\n                                  txtIsi +\r\n                                  \"');\";\r\n                              _controller.evaluateJavascript(txt);\r\n                            }),\r\n                          ],\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  )\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  JavascriptChannel getTextJavascriptChannel(BuildContext context) {\r\n    return JavascriptChannel(\r\n        name: 'GetTextSummernote',\r\n        onMessageReceived: (JavascriptMessage message) {\r\n          String isi = message.message;\r\n          if (isi.isEmpty ||\r\n              isi == \"<p></p>\" ||\r\n              isi == \"<p><br></p>\" ||\r\n              isi == \"<p><br/></p>\") {\r\n            isi = \"\";\r\n          }\r\n          setState(() {\r\n            text = isi;\r\n          });\r\n        });\r\n  }\r\n\r\n  Future<String> getText() async {\r\n    await _controller.evaluateJavascript(\r\n        \"GetTextSummernote.postMessage(document.getElementsByClassName('note-editable')[0].innerHTML);\");\r\n    return text;\r\n  }\r\n\r\n  setText(String v) async {\r\n    String txtIsi = v\r\n        .replaceAll(\"'\", '\\\\\"')\r\n        .replaceAll('\"', '\\\\\"')\r\n        .replaceAll(\"[\", \"\\\\[\")\r\n        .replaceAll(\"]\", \"\\\\]\")\r\n        .replaceAll(\"\\n\", \"<br/>\")\r\n        .replaceAll(\"\\n\\n\", \"<br/>\")\r\n        .replaceAll(\"\\r\", \" \")\r\n        .replaceAll('\\r\\n', \" \");\r\n    String txt =\r\n        \"document.getElementsByClassName('note-editable')[0].innerHTML = '\" +\r\n            txtIsi +\r\n            \"';\";\r\n    _controller.evaluateJavascript(txt);\r\n  }\r\n\r\n  setFullContainer() {\r\n    _controller.evaluateJavascript(\r\n        '\\$(\"#summernote\").summernote(\"fullscreen.toggle\");');\r\n  }\r\n\r\n  setFocus() {\r\n    _controller.evaluateJavascript(\"\\$('#summernote').summernote('focus');\");\r\n  }\r\n\r\n  setEmpty() {\r\n    _controller.evaluateJavascript(\"\\$('#summernote').summernote('reset');\");\r\n  }\r\n\r\n  setHint(String text) {\r\n    String hint = '\\$(\".note-placeholder\").html(\"$text\");';\r\n    _controller.evaluateJavascript(hint);\r\n  }\r\n\r\n  Widget widgetIcon(IconData icon, String title, {OnClik onKlik}) {\r\n    return InkWell(\r\n      onTap: () {\r\n        onKlik();\r\n      },\r\n      child: Row(\r\n        children: <Widget>[\r\n          Icon(\r\n            icon,\r\n            color: Colors.black38,\r\n            size: 20,\r\n          ),\r\n          Padding(\r\n            padding: const EdgeInsets.only(left: 4),\r\n            child: Text(\r\n              title,\r\n              style: TextStyle(\r\n                  color: Colors.black54,\r\n                  fontSize: 16,\r\n                  fontWeight: FontWeight.w400),\r\n            ),\r\n          )\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  dialogPickImage(BuildContext context) {\r\n    return showDialog(\r\n        context: context,\r\n        barrierDismissible: true,\r\n        builder: (BuildContext context) {\r\n          return AlertDialog(\r\n            elevation: 0,\r\n            backgroundColor: Colors.transparent,\r\n            content: Container(\r\n              decoration: BoxDecoration(\r\n                color: Colors.white,\r\n                borderRadius: BorderRadius.all(Radius.circular(8)),\r\n              ),\r\n              padding: const EdgeInsets.all(12),\r\n              height: 120,\r\n              child: PickImage(\r\n                  color: Colors.black45,\r\n                  callbackFile: (file) async {\r\n                    String filename = p.basename(file.path);\r\n                    List<int> imageBytes = await file.readAsBytes();\r\n                    print(\"--------------------\\n\");\r\n                    print(imageBytes);\r\n                    print(\"--------------------\\n\");\r\n\r\n                    // String basedata = base64Encode(imageBytes);\r\n                    String base64Image =\r\n                        \"<img width=\\\"${widget.widthImage}\\\" src=\\\"data:image/png;base64, \"\r\n                        \"${base64Encode(imageBytes)}\\\" data-filename=\\\"$filename\\\">\";\r\n\r\n                    String txt =\r\n                        \"\\$('.note-editable').append( '\" + base64Image + \"');\";\r\n                    _controller.evaluateJavascript(txt);\r\n                  }),\r\n            ),\r\n          );\r\n        });\r\n  }\r\n\r\n  bottomSheetPickImage(context) {\r\n    showModalBottomSheet(\r\n        shape: RoundedRectangleBorder(\r\n          borderRadius: BorderRadius.vertical(top: Radius.circular(16)),\r\n        ),\r\n        backgroundColor: Colors.white,\r\n        context: context,\r\n        builder: (BuildContext bc) {\r\n          return StatefulBuilder(builder: (BuildContext context, setState) {\r\n            return SingleChildScrollView(\r\n                child: Container(\r\n              height: 140,\r\n              width: double.infinity,\r\n              child: PickImage(callbackFile: (file) async {\r\n                print(\"INSIDE\");\r\n                _image = file;\r\n                 await getHttp();\r\n                print(\"============================\");\r\n                print(globresponse);\r\n                // String filename = p.basename(file.path);\r\n                // String imageTag =\r\n                //     \"<img width=\\\"${widget.widthImage}\\\" src=\\\"$globresponse\\\" data-filename=\\\"$filename\\\">\";\r\n                // String imageTag = globresponse.toString();\r\n                String txt =\r\n                    \"\\$('.note-editable').append( '\" + globresponse.toString() + \"');\";\r\n                _controller.evaluateJavascript(txt);\r\n              }),\r\n            ));\r\n          });\r\n        });\r\n  }\r\n}\r\n\r\n// library html_editor;\r\n//\r\n// import 'dart:convert';\r\n// import 'dart:io';\r\n//\r\n// import 'package:flutter/foundation.dart';\r\n// import 'package:flutter/gestures.dart';\r\n// import 'package:flutter/material.dart';\r\n// import 'package:flutter/services.dart';\r\n// import 'package:html_editor/local_server.dart';\r\n// import 'package:html_editor/pick_image.dart';\r\n// import 'package:path/path.dart' as p;\r\n// import 'package:webview_flutter/webview_flutter.dart';\r\n//\r\n// /*\r\n//  * Created by riyadi rb on 2/5/2020.\r\n//  * link  : https://github.com/xrb21/flutter-html-editor\r\n//  */\r\n//\r\n// typedef void OnClik();\r\n//\r\n// class HtmlEditor extends StatefulWidget {\r\n//   final String value;\r\n//   final double height;\r\n//   final BoxDecoration decoration;\r\n//   final bool useBottomSheet;\r\n//   final String widthImage;\r\n//   final bool showBottomToolbar;\r\n//   final String hint;\r\n//\r\n//   HtmlEditor(\r\n//       {Key key,\r\n//       this.value,\r\n//       this.height = 380,\r\n//       this.decoration,\r\n//       this.useBottomSheet = true,\r\n//       this.widthImage = \"100%\",\r\n//       this.showBottomToolbar = true,\r\n//       this.hint})\r\n//       : super(key: key);\r\n//\r\n//   @override\r\n//   HtmlEditorState createState() => HtmlEditorState();\r\n// }\r\n//\r\n// class HtmlEditorState extends State<HtmlEditor> {\r\n//   WebViewController _controller;\r\n//   String text = \"\";\r\n//   final Key _mapKey = UniqueKey();\r\n//\r\n//   int port = 5321;\r\n//   LocalServer localServer;\r\n//\r\n//   @override\r\n//   void initState() {\r\n//     if (!Platform.isAndroid) {\r\n//       initServer();\r\n//     }\r\n//     super.initState();\r\n//   }\r\n//\r\n//   initServer() {\r\n//     localServer = LocalServer(port);\r\n//     localServer.start(handleRequest);\r\n//   }\r\n//\r\n//   void handleRequest(HttpRequest request) {\r\n//     try {\r\n//       if (request.method == 'GET' &&\r\n//           request.uri.queryParameters['query'] == \"getRawTeXHTML\") {\r\n//       } else {}\r\n//     } catch (e) {\r\n//       print('Exception in handleRequest: $e');\r\n//     }\r\n//   }\r\n//\r\n//   @override\r\n//   void dispose() {\r\n//     if (_controller != null) {\r\n//       _controller = null;\r\n//     }\r\n//     if (!Platform.isAndroid) {\r\n//       localServer.close();\r\n//     }\r\n//     super.dispose();\r\n//   }\r\n//\r\n//   _loadHtmlFromAssets() async {\r\n//     final filePath = 'packages/html_editor/summernote/summernote.html';\r\n//     _controller.loadUrl(\"http://localhost:$port/$filePath\");\r\n//   }\r\n//\r\n//   @override\r\n//   Widget build(BuildContext context) {\r\n//     return Container(\r\n//       height: widget.height,\r\n//       decoration: widget.decoration ??\r\n//           BoxDecoration(\r\n//             borderRadius: BorderRadius.all(Radius.circular(4)),\r\n//             border: Border.all(color: Color(0xffececec), width: 1),\r\n//           ),\r\n//       child: Column(\r\n//         children: <Widget>[\r\n//           Expanded(\r\n//             child: WebView(\r\n//               key: _mapKey,\r\n//               onWebResourceError: (e) {\r\n//                 print(\"error ${e.description}\");\r\n//               },\r\n//               onWebViewCreated: (webViewController) {\r\n//                 _controller = webViewController;\r\n//\r\n//                 if (Platform.isAndroid) {\r\n//                   final filename =\r\n//                       'packages/html_editor/summernote/summernote.html';\r\n//                   _controller.loadUrl(\r\n//                       \"file:///android_asset/flutter_assets/\" + filename);\r\n//                 } else {\r\n//                   _loadHtmlFromAssets();\r\n//                 }\r\n//               },\r\n//               javascriptMode: JavascriptMode.unrestricted,\r\n//               gestureNavigationEnabled: true,\r\n//               gestureRecognizers: [\r\n//                 Factory(\r\n//                     () => VerticalDragGestureRecognizer()..onUpdate = (_) {}),\r\n//               ].toSet(),\r\n//               javascriptChannels: <JavascriptChannel>[\r\n//                 getTextJavascriptChannel(context)\r\n//               ].toSet(),\r\n//               onPageFinished: (String url) {\r\n//                 if (widget.hint != null) {\r\n//                   setHint(widget.hint);\r\n//                 } else {\r\n//                   setHint(\"\");\r\n//                 }\r\n//\r\n//                 setFullContainer();\r\n//                 if (widget.value != null) {\r\n//                   setText(widget.value);\r\n//                 }\r\n//               },\r\n//             ),\r\n//           ),\r\n//           widget.showBottomToolbar\r\n//               ? Divider()\r\n//               : Container(\r\n//                   height: 1,\r\n//                 ),\r\n//           widget.showBottomToolbar\r\n//               ? Padding(\r\n//                   padding: const EdgeInsets.only(\r\n//                       left: 4.0, right: 4, bottom: 8, top: 2),\r\n//                   child: Row(\r\n//                     mainAxisAlignment: MainAxisAlignment.spaceAround,\r\n//                     children: <Widget>[\r\n//                       widgetIcon(Icons.image, \"Image\", onKlik: () {\r\n//                         widget.useBottomSheet\r\n//                             ? bottomSheetPickImage(context)\r\n//                             : dialogPickImage(context);\r\n//                       }),\r\n//                       widgetIcon(Icons.content_copy, \"Copy\", onKlik: () async {\r\n//                         String data = await getText();\r\n//                         Clipboard.setData(new ClipboardData(text: data));\r\n//                       }),\r\n//                       widgetIcon(Icons.content_paste, \"Paste\",\r\n//                           onKlik: () async {\r\n//                         ClipboardData data =\r\n//                             await Clipboard.getData(Clipboard.kTextPlain);\r\n//\r\n//                         String txtIsi = data.text\r\n//                             .replaceAll(\"'\", '\\\\\"')\r\n//                             .replaceAll('\"', '\\\\\"')\r\n//                             .replaceAll(\"[\", \"\\\\[\")\r\n//                             .replaceAll(\"]\", \"\\\\]\")\r\n//                             .replaceAll(\"\\n\", \"<br/>\")\r\n//                             .replaceAll(\"\\n\\n\", \"<br/>\")\r\n//                             .replaceAll(\"\\r\", \" \")\r\n//                             .replaceAll('\\r\\n', \" \");\r\n//                         String txt =\r\n//                             \"\\$('.note-editable').append( '\" + txtIsi + \"');\";\r\n//                         _controller.evaluateJavascript(txt);\r\n//                       }),\r\n//                     ],\r\n//                   ),\r\n//                 )\r\n//               : Container(\r\n//                   height: 1,\r\n//                 )\r\n//         ],\r\n//       ),\r\n//     );\r\n//   }\r\n//\r\n//   JavascriptChannel getTextJavascriptChannel(BuildContext context) {\r\n//     return JavascriptChannel(\r\n//         name: 'GetTextSummernote',\r\n//         onMessageReceived: (JavascriptMessage message) {\r\n//           String isi = message.message;\r\n//           if (isi.isEmpty ||\r\n//               isi == \"<p></p>\" ||\r\n//               isi == \"<p><br></p>\" ||\r\n//               isi == \"<p><br/></p>\") {\r\n//             isi = \"\";\r\n//           }\r\n//           setState(() {\r\n//             text = isi;\r\n//           });\r\n//         });\r\n//   }\r\n//\r\n//   Future<String> getText() async {\r\n//     await _controller.evaluateJavascript(\r\n//         \"GetTextSummernote.postMessage(document.getElementsByClassName('note-editable')[0].innerHTML);\");\r\n//     return text;\r\n//   }\r\n//\r\n//   setText(String v) async {\r\n//     String txtIsi = v\r\n//         .replaceAll(\"'\", '\\\\\"')\r\n//         .replaceAll('\"', '\\\\\"')\r\n//         .replaceAll(\"[\", \"\\\\[\")\r\n//         .replaceAll(\"]\", \"\\\\]\")\r\n//         .replaceAll(\"\\n\", \"<br/>\")\r\n//         .replaceAll(\"\\n\\n\", \"<br/>\")\r\n//         .replaceAll(\"\\r\", \" \")\r\n//         .replaceAll('\\r\\n', \" \");\r\n//     String txt =\r\n//         \"document.getElementsByClassName('note-editable')[0].innerHTML = '\" +\r\n//             txtIsi +\r\n//             \"';\";\r\n//     _controller.evaluateJavascript(txt);\r\n//   }\r\n//\r\n//   setFullContainer() {\r\n//     _controller.evaluateJavascript(\r\n//         '\\$(\"#summernote\").summernote(\"fullscreen.toggle\");');\r\n//   }\r\n//\r\n//   setFocus() {\r\n//     _controller.evaluateJavascript(\"\\$('#summernote').summernote('focus');\");\r\n//   }\r\n//\r\n//   setEmpty() {\r\n//     _controller.evaluateJavascript(\"\\$('#summernote').summernote('reset');\");\r\n//   }\r\n//\r\n//   setHint(String text) {\r\n//     String hint = '\\$(\".note-placeholder\").html(\"$text\");';\r\n//     _controller.evaluateJavascript(hint);\r\n//   }\r\n//\r\n//   Widget widgetIcon(IconData icon, String title, {OnClik onKlik}) {\r\n//     return InkWell(\r\n//       onTap: () {\r\n//         onKlik();\r\n//       },\r\n//       child: Row(\r\n//         children: <Widget>[\r\n//           Icon(\r\n//             icon,\r\n//             color: Colors.black38,\r\n//             size: 20,\r\n//           ),\r\n//           Padding(\r\n//             padding: const EdgeInsets.only(left: 4),\r\n//             child: Text(\r\n//               title,\r\n//               style: TextStyle(\r\n//                   color: Colors.black54,\r\n//                   fontSize: 16,\r\n//                   fontWeight: FontWeight.w400),\r\n//             ),\r\n//           )\r\n//         ],\r\n//       ),\r\n//     );\r\n//   }\r\n//\r\n//   dialogPickImage(BuildContext context) {\r\n//     return showDialog(\r\n//         context: context,\r\n//         barrierDismissible: true,\r\n//         builder: (BuildContext context) {\r\n//           return AlertDialog(\r\n//             elevation: 0,\r\n//             backgroundColor: Colors.transparent,\r\n//             content: Container(\r\n//               decoration: BoxDecoration(\r\n//                 color: Colors.white,\r\n//                 borderRadius: BorderRadius.all(Radius.circular(8)),\r\n//               ),\r\n//               padding: const EdgeInsets.all(12),\r\n//               height: 120,\r\n//               child: PickImage(\r\n//                   color: Colors.black45,\r\n//                   callbackFile: (file) async {\r\n//                     String filename = p.basename(file.path);\r\n//                     List<int> imageBytes = await file.readAsBytes();\r\n//                     String base64Image =\r\n//                         \"<img width=\\\"${widget.widthImage}\\\" src=\\\"data:image/png;base64, \"\r\n//                         \"${base64Encode(imageBytes)}\\\" data-filename=\\\"$filename\\\">\";\r\n//\r\n//                     String txt =\r\n//                         \"\\$('.note-editable').append( '\" + base64Image + \"');\";\r\n//                     _controller.evaluateJavascript(txt);\r\n//                   }),\r\n//             ),\r\n//           );\r\n//         });\r\n//   }\r\n//\r\n//   bottomSheetPickImage(context) {\r\n//     showModalBottomSheet(\r\n//         shape: RoundedRectangleBorder(\r\n//           borderRadius: BorderRadius.vertical(top: Radius.circular(16)),\r\n//         ),\r\n//         backgroundColor: Colors.white,\r\n//         context: context,\r\n//         builder: (BuildContext bc) {\r\n//           return StatefulBuilder(builder: (BuildContext context, setStatex) {\r\n//             return SingleChildScrollView(\r\n//                 child: Container(\r\n//               height: 140,\r\n//               width: double.infinity,\r\n//               child: PickImage(callbackFile: (file) async {\r\n//                 String filename = p.basename(file.path);\r\n//                 List<int> imageBytes = await file.readAsBytes();\r\n//                 String base64Image = \"<img width=\\\"${widget.widthImage}\\\" \"\r\n//                     \"src=\\\"data:image/png;base64, \"\r\n//                     \"${base64Encode(imageBytes)}\\\" data-filename=\\\"$filename\\\">\";\r\n//                 String txt =\r\n//                     \"\\$('.note-editable').append( '\" + base64Image + \"');\";\r\n//                 _controller.evaluateJavascript(txt);\r\n//               }),\r\n//             ));\r\n//           });\r\n//         });\r\n//   }\r\n// }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../fyi_main2_2_1/lib/html_editor.dart	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/lib/html_editor.dart	(date 1605103658192)
@@ -193,8 +193,8 @@
                                 ? bottomSheetPickImage(context)
                                 : dialogPickImage(context);
                           },
-                          child: Row(
-                            mainAxisAlignment: MainAxisAlignment.center,
+                          child: ButtonBar(
+                            mainAxisSize: MainAxisSize.min,
                             children: <Widget>[
                               widgetIcon(Icons.image,"",
                                   onKlik: () {
@@ -208,13 +208,12 @@
                               //     if(close=="X")
                               //       {
                               //         close="-";
-                              //
                               //       }
                               //     else{
                               //       close='X';
                               //     }
                               //   });
-                              // }, child: Text(close))
+                              // }, child: Text(close,style: TextStyle(fontSize: 20,color: Colors.red.shade800,fontWeight: FontWeight.w900),))
                             ],
                           ),
                         ),
Index: ../fyi_main2_2_1/lib/login_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/cupertino.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:firebase_core/firebase_core.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport 'package:fyi_main2_2_1/demo.dart';\r\nimport 'package:google_sign_in/google_sign_in.dart';\r\nimport 'package:flutter_facebook_auth/flutter_facebook_auth.dart';\r\nimport 'dart:io';\r\nimport 'package:path_provider/path_provider.dart';\r\nimport 'dart:convert';\r\nimport 'package:dio/dio.dart';\r\nimport 'package:prompt_dialog/prompt_dialog.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\n\r\nCheckloggedInGoogle() async {\r\n  SharedPreferences prefs = await SharedPreferences.getInstance();\r\n  prefs.setInt('intValue',1);\r\n}\r\nCheckloggedInFB() async {\r\n  SharedPreferences prefs = await SharedPreferences.getInstance();\r\n  prefs.setInt('intValue',2);\r\n}\r\nPrefusername(String name) async {\r\n  SharedPreferences prefs = await SharedPreferences.getInstance();\r\n  prefs.setString('prefusername',name);\r\n}\r\nvar username;\r\nint super_signin=0; //0=google 1=facebook\r\nString fileName = \"CacheData.json\";\r\nResponse response;\r\nString token =\r\n    \"\";\r\nvar educationJson;\r\nvar about;\r\nvar skillsJson;\r\nvar projectsJson;\r\nvar dob;\r\nvar phone;\r\nvar name;\r\nvar achievementsJson;\r\nvar image;\r\nvar email;\r\nvar experienceJson;\r\nList<ExperienceList> finalexp;\r\nList<EducationList> finaledu;\r\nList<SkillsList> finalskill;\r\nList<ProjectList> finalproject;\r\nList<AchievementList> finalachievement;\r\n\r\nList<Widget> experienceexpandlist = new List();\r\nList<Widget> skillexpandlist = new List();\r\nList<Widget> educationexpandlist = new List();\r\nList<Widget> projectexpandlist = new List();\r\nList<Widget> achievementexpandlist = new List();\r\n\r\nclass ExperienceList {\r\n  String organization;\r\n  String from;\r\n  String to;\r\n  String description;\r\n  String post;\r\n  String status;\r\n\r\n  ExperienceList({\r\n    this.organization,\r\n    this.from,\r\n    this.to,\r\n    this.description,\r\n    this.post,\r\n    this.status,\r\n  });\r\n\r\n  factory ExperienceList.fromJson(Map<String, dynamic> json) => ExperienceList(\r\n        organization: json[\"organization\"],\r\n        from: json[\"from\"],\r\n        to: json[\"to\"],\r\n        description: json[\"description\"],\r\n        post: json[\"post\"],\r\n        status: json[\"status\"],\r\n      );\r\n}\r\n\r\nclass SkillsList {\r\n  String field;\r\n  var level;\r\n\r\n  SkillsList({this.field, this.level});\r\n\r\n  factory SkillsList.fromJson(Map<String, dynamic> json) => SkillsList(\r\n        field: json[\"field\"],\r\n        level: json[\"level\"],\r\n      );\r\n}\r\n\r\nclass EducationList {\r\n  String to;\r\n  String degree;\r\n  String description;\r\n  String status;\r\n  String from;\r\n  String institute;\r\n\r\n  EducationList(\r\n      {this.status,\r\n      this.description,\r\n      this.from,\r\n      this.degree,\r\n      this.institute,\r\n      this.to});\r\n\r\n  factory EducationList.fromJson(Map<String, dynamic> json) => EducationList(\r\n        to: json[\"to\"],\r\n        degree: json[\"degree\"],\r\n        description: json[\"description\"],\r\n        status: json[\"status\"],\r\n        from: json[\"from\"],\r\n        institute: json[\"institute\"],\r\n      );\r\n}\r\n\r\nclass ProjectList {\r\n  String to;\r\n  String link;\r\n  String description;\r\n  String status;\r\n  String from;\r\n  String name;\r\n\r\n  ProjectList(\r\n      {this.status,\r\n      this.description,\r\n      this.from,\r\n      this.name,\r\n      this.to,\r\n      this.link});\r\n\r\n  factory ProjectList.fromJson(Map<String, dynamic> json) => ProjectList(\r\n        to: json[\"to\"],\r\n        name: json[\"name\"],\r\n        description: json[\"description\"],\r\n        status: json[\"status\"],\r\n        from: json[\"from\"],\r\n        link: json[\"link\"],\r\n      );\r\n}\r\n\r\nclass AchievementList {\r\n  String title;\r\n  String year;\r\n  String description;\r\n  String issuer;\r\n\r\n  AchievementList({\r\n    this.title,\r\n    this.description,\r\n    this.year,\r\n    this.issuer,\r\n  });\r\n\r\n  factory AchievementList.fromJson(Map<String, dynamic> json) =>\r\n      AchievementList(\r\n        title: json[\"title\"],\r\n        year: json[\"year\"],\r\n        description: json[\"description\"],\r\n        issuer: json[\"issuer\"],\r\n      );\r\n}\r\n\r\nfinal FirebaseAuth _auth = FirebaseAuth.instance;\r\nfinal GoogleSignIn googleSignIn = GoogleSignIn();\r\nbool isLoggedIn = false;\r\nvar det = \"\";\r\n\r\nFuture<String> signInWithGoogle(BuildContext context) async {\r\n  try{\r\n  await Firebase.initializeApp();\r\n  var dio = Dio();\r\n  final GoogleSignInAccount googleSignInAccount = await googleSignIn.signIn();\r\n  final GoogleSignInAuthentication googleSignInAuthentication =\r\n      await googleSignInAccount.authentication;\r\n  final AuthCredential credential = GoogleAuthProvider.credential(\r\n    accessToken: googleSignInAuthentication.accessToken,\r\n    idToken: googleSignInAuthentication.idToken,\r\n  );\r\n  final UserCredential authResult =\r\n      await _auth.signInWithCredential(credential);\r\n  final User user = authResult.user;\r\n  print(\"bye\");\r\n  var res;\r\n  var phoneNumber;\r\n  if (user != null) {\r\n    assert(!user.isAnonymous);\r\n    assert(await user.getIdToken() != null);\r\n\r\n    var currentUser = _auth.currentUser;\r\n    print(currentUser);\r\n    // await user.linkWithPhoneNumber(\"+911111111111\");\r\n    print(user);\r\n    Map<String,dynamic> currentUser1={\"uid\":currentUser.uid,\"xa\":currentUser.refreshToken,\"displayName\":currentUser.displayName,\"email\":currentUser.email,\"photoURL\":currentUser.photoURL,\"username\":\"\",\"phoneNumber\":\"\"};\r\n    assert(user.uid == currentUser1['uid']);\r\n    try {\r\n        var emailCheck = await dio.post(\r\n          \"https://us-central1-fyi-vitc.cloudfunctions.net/api/auth/emailCheck\",\r\n          data:{ \"email\": currentUser1[\"email\"] }\r\n        );\r\n        print(emailCheck.data);\r\n        username=emailCheck.data['username'];\r\n        var body = {\r\n          \"google\": true,\r\n          \"token\": await currentUser.getIdToken(),\r\n          \"username\": username,\r\n          \"name\": currentUser1['displayName'],\r\n          \"email\": currentUser1['email'],\r\n          \"picture\": currentUser1['photoURL'],\r\n          \"phone\": phoneNumber,\r\n        };\r\n        print(body);\r\n\r\n        res = await dio.post(\r\n          \"https://us-central1-fyi-vitc.cloudfunctions.net/api/auth/userLogin\",\r\n          data:body,\r\n        );\r\n        print('signInWithGoogle succeeded: $res');\r\n        CheckloggedInGoogle();\r\n        super_signin=0;\r\n        det = user.displayName;\r\n        token=res.data['token'];\r\n        print(\"TOKEN BS: $token\");\r\n        return '${user.displayName}';\r\n      } catch(err) {\r\n        print(err);\r\n        var value = await prompt(context,title:Text(\"Enter a unique username\"));\r\n        while (true) {\r\n          try {\r\n            await dio.get(\r\n              \"https://us-central1-fyi-vitc.cloudfunctions.net/api/auth/checkUsernameAvailability/\" +\r\n                value\r\n            );\r\n            break;\r\n          } catch (err) {\r\n            value = await prompt(context,\r\n              title:Text(value + \" is Not available. Please try another one\")\r\n            );\r\n          }\r\n        }\r\n        username=value;\r\n        phoneNumber = user.phoneNumber;\r\n        print(phoneNumber);\r\n        if (currentUser1['phoneNumber']=='' || currentUser1['phoneNumber']==null) {\r\n          phoneNumber = await prompt(context,title:Text(\"Enter your Mobile Number\"));\r\n          var phone = \"+91\" + phoneNumber;\r\n          await _auth.verifyPhoneNumber(phoneNumber: phone,\r\n           verificationCompleted:(cred){\r\n             },\r\n             verificationFailed: (e){\r\n               print(e.toString());\r\n               print(\"error\");\r\n              },\r\n              codeSent: (String verificationId, int resendToken) async {\r\n                String smsCode = await prompt(context,title:Text(\"Enter the OTP sent to your phone Number\"));\r\n                PhoneAuthCredential phoneAuthCredential = PhoneAuthProvider.credential(verificationId: verificationId, smsCode: smsCode);\r\n                await _auth.currentUser.linkWithCredential(phoneAuthCredential);\r\n                var body = {\r\n                \"google\": true,\r\n                \"token\": await currentUser.getIdToken(),\r\n                \"username\": username,\r\n                \"name\": currentUser1['displayName'],\r\n                \"email\": currentUser1['email'],\r\n                \"picture\": currentUser1['photoURL'],\r\n                \"phone\": phoneNumber,\r\n              };\r\n              res = await dio.post(\r\n                \"https://us-central1-fyi-vitc.cloudfunctions.net/api/auth/userLogin\",\r\n                data:body,\r\n              );\r\n                print('signInWithGoogle succeeded: $res');\r\n                CheckloggedInGoogle();\r\n                det = user.displayName;\r\n                return '${user.displayName}';\r\n             \r\n              },\r\n              codeAutoRetrievalTimeout: (a)=>{print(2)}\r\n            );\r\n        }\r\n      }\r\n      \r\n  }}catch(err){\r\n    print(err);\r\n  }\r\n}\r\n\r\nvoid signOutGoogle() async {\r\n  await googleSignIn.signOut();\r\n\r\n  print(\"User Signed Out\");\r\n}\r\n\r\nclass LoginPage extends StatefulWidget {\r\n  @override\r\n  _LoginPageState createState() => _LoginPageState();\r\n}\r\n\r\nclass _LoginPageState extends State<LoginPage> {\r\n  Future<void> gethttp(String userloginname) async {\r\n    var dio = Dio();\r\n    try {\r\n      userloginname=username;\r\n      print(\"USERNAME101 $username\");\r\n      response = await dio.get(\r\n        \"https://us-central1-fyi-vitc.cloudfunctions.net/api/profile/maddyFB\",\r\n        queryParameters: {\"x-auth-token\": token}, //?x-auth-token=$token\r\n      );\r\n      print(\"GETHHTTP fucntion print -> $response\");\r\n      var body = response.data;\r\n      // final ids = json.decode(response.data);\r\n      print(body);\r\n      print(\"see here\");\r\n      about = body['about'];\r\n      print(about);\r\n      educationJson = body['education'];\r\n      print(\"see here\");\r\n\r\n      skillsJson = body['skills'];\r\n      print(\"see here\");\r\n\r\n      projectsJson = body['projects'];\r\n      print(\"see here\");\r\n\r\n      achievementsJson = body['achievements'];\r\n      experienceJson = body['experience'];\r\n      print(\"see here\");\r\n\r\n\r\n      print(\"see here\");\r\n\r\n      dob = body['dob'];\r\n      print(\"see here\");\r\n      phone = body['phone'];\r\n      name = body['name'];\r\n      image = body['picture'];\r\n      email = body['email'];\r\n      var tempexperience = experienceJson;\r\n      var tempskill = skillsJson;\r\n      var tempedu = educationJson;\r\n      var tempach = achievementsJson;\r\n      var temppro = projectsJson;\r\n      print(\"see here\");\r\n\r\n      print(projectsJson);\r\n      finalexp = tempexperience\r\n          .map<ExperienceList>((json) => ExperienceList.fromJson(json))\r\n          .toList();\r\n      finaledu = tempedu\r\n          .map<EducationList>((json) => EducationList.fromJson(json))\r\n          .toList();\r\n      finalskill = tempskill\r\n          .map<SkillsList>((json) => SkillsList.fromJson(json))\r\n          .toList();\r\n      finalproject = temppro\r\n          .map<ProjectList>((json) => ProjectList.fromJson(json))\r\n          .toList();\r\n      finalachievement = tempach\r\n          .map<AchievementList>((json) => AchievementList.fromJson(json))\r\n          .toList();\r\n      print(\"${finalproject.length},${finaledu.length},${finalexp.length}, ${finalachievement.length}, ${finalskill.length}\");\r\n      for (int i = 0; i < finalexp.length; i++) {\r\n        if (finalexp[i].status.toLowerCase() == \"completed\") {\r\n          finalexp[i].status = \" \";\r\n        }\r\n        experienceexpandlist.add(ExperienceContainer(\r\n            finalexp[i].organization,\r\n            finalexp[i].post,\r\n            finalexp[i].from,\r\n            finalexp[i].to,\r\n            finalexp[i].status,\r\n            finalexp[i].description));\r\n      }\r\n      for (int i = 0; i < finalskill.length; i++) {\r\n        print(\"hello\");\r\n        skillexpandlist\r\n            .add(SkillContainer(finalskill[i].field, finalskill[i].level.toString()));\r\n      }\r\n      for (int i = 0; i < finaledu.length; i++) {\r\n        if (finaledu[i].status.toLowerCase() == \"completed\") {\r\n          finaledu[i].status = \" \";\r\n        }\r\n        educationexpandlist.add(EducationContainer(\r\n            finaledu[i].degree,\r\n            finaledu[i].institute,\r\n            finaledu[i].from,\r\n            finaledu[i].to,\r\n            finaledu[i].status,\r\n            finaledu[i].description));\r\n      }\r\n      for (int i = 0; i < finalachievement.length; i++) {\r\n        achievementexpandlist.add(AchievementContainer(\r\n            finalachievement[i].title,\r\n            finalachievement[i].year,\r\n            finalachievement[i].issuer,\r\n            finalachievement[i].description));\r\n      }\r\n      for (int i = 0; i < finalproject.length; i++) {\r\n        if (finalproject[i].status.toLowerCase() == \"completed\") {\r\n          finalproject[i].status = \" \";\r\n        }\r\n        projectexpandlist.add(ProjectContainer(\r\n            finalproject[i].name,\r\n            finalproject[i].link,\r\n            finalproject[i].from,\r\n            finalproject[i].to,\r\n            finalproject[i].status,\r\n            finalproject[i].description));\r\n      }\r\nprint(\"see here\");\r\n      print(skillexpandlist.length);\r\n      // var tempDir = await getTemporaryDirectory();\r\n      // File file = new File(tempDir.path + \"/\" + fileName);\r\n      // file.writeAsString(response.toString(),\r\n      //     flush: true, mode: FileMode.write);\r\n    } catch (e) {\r\n      print(e);\r\n      print(\"ERROR\");\r\n    }\r\n  }\r\n\r\n  Future<void> getcache(String userloginname) async {\r\n    var cacheDir = await getTemporaryDirectory();\r\n    print(\"getcache\");\r\n    if (await File(cacheDir.path + \"/\" + fileName).exists()) {\r\n      print(\"Loading from cache\");\r\n      var cachedata = File(cacheDir.path + \"/\" + fileName).readAsStringSync();\r\n      var cachedata1 = json.decode(cachedata);\r\n      print(cachedata1);\r\n      var body = cachedata1;\r\n      // final ids = json.decode(response.data);\r\n      educationJson = body['education'];\r\n      about = body['about'];\r\n      skillsJson = body['skills'];\r\n      projectsJson = body['projects'];\r\n      dob = body['dob'];\r\n      phone = body['phone'];\r\n      name = body['name'];\r\n      achievementsJson = body['achievements'];\r\n      image = body['picture'];\r\n      email = body['email'];\r\n      experienceJson = body['experience'];\r\n      print(experienceJson.toString());\r\n      var tempexperience = experienceJson;\r\n      var tempskill = skillsJson;\r\n      var tempedu = educationJson;\r\n      var tempach = achievementsJson;\r\n      var temppro = projectsJson;\r\n      finalexp = tempexperience\r\n          .map<ExperienceList>((json) => ExperienceList.fromJson(json))\r\n          .toList();\r\n      finaledu = tempedu\r\n          .map<EducationList>((json) => EducationList.fromJson(json))\r\n          .toList();\r\n      finalskill = tempskill\r\n          .map<SkillsList>((json) => SkillsList.fromJson(json))\r\n          .toList();\r\n      finalproject = temppro\r\n          .map<ProjectList>((json) => ProjectList.fromJson(json))\r\n          .toList();\r\n      finalachievement = tempach\r\n          .map<AchievementList>((json) => AchievementList.fromJson(json))\r\n          .toList();\r\n      for (int i = 0; i < finalexp.length; i++) {\r\n        if (finalexp[i].status.toLowerCase() == \"completed\") {\r\n          finalexp[i].status = \" \";\r\n        }\r\n        experienceexpandlist.add(ExperienceContainer(\r\n            finalexp[i].organization,\r\n            finalexp[i].post,\r\n            finalexp[i].from,\r\n            finalexp[i].to,\r\n            finalexp[i].status,\r\n            finalexp[i].description));\r\n      }\r\n      for (int i = 0; i < finalskill.length; i++) {\r\n        skillexpandlist\r\n            .add(SkillContainer(finalskill[i].field, finalskill[i].level));\r\n      }\r\n      for (int i = 0; i < finaledu.length; i++) {\r\n        if (finaledu[i].status.toLowerCase() == \"completed\") {\r\n          finaledu[i].status = \" \";\r\n        }\r\n        educationexpandlist.add(EducationContainer(\r\n            finaledu[i].degree,\r\n            finaledu[i].institute,\r\n            finaledu[i].from,\r\n            finaledu[i].to,\r\n            finaledu[i].status,\r\n            finaledu[i].description));\r\n      }\r\n      for (int i = 0; i < finalachievement.length; i++) {\r\n        achievementexpandlist.add(AchievementContainer(\r\n            finalachievement[i].title,\r\n            finalachievement[i].year,\r\n            finalachievement[i].issuer,\r\n            finalachievement[i].description));\r\n      }\r\n      for (int i = 0; i < finalproject.length; i++) {\r\n        print(\"HOLA\");\r\n        if (finalproject[i].status.toLowerCase() == \"completed\") {\r\n          finalproject[i].status = \" \";\r\n        }\r\n        projectexpandlist.add(ProjectContainer(\r\n            finalproject[i].name,\r\n            finalproject[i].link,\r\n            finalproject[i].from,\r\n            finalproject[i].to,\r\n            finalproject[i].status,\r\n            finalproject[i].description));\r\n      }\r\n      print(\"found\");\r\n      print(finalexp[0].organization);\r\n      print(image);\r\n    }\r\n    //TODO: If the Json file does not exist, then make the API Call\r\n    else {\r\n      Prefusername(det);\r\n      gethttp(det);\r\n    }\r\n  }\r\n\r\n  Widget ExperienceContainer(String title, String post, String from, String to,\r\n      String status, String desc) {\r\n    return Container(\r\n        padding: EdgeInsets.all(25),\r\n        decoration: BoxDecoration(\r\n            color: Colors.blue.shade100,\r\n            borderRadius: BorderRadius.circular(10)),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              title,\r\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n            ),\r\n            Row(\r\n              mainAxisAlignment: MainAxisAlignment.spaceAround,\r\n              children: [\r\n                Text(\r\n                  post,\r\n                  style: TextStyle(fontSize: 17, fontWeight: FontWeight.bold),\r\n                ),\r\n                Text(\r\n                  from,\r\n                  style: TextStyle(fontSize: 13),\r\n                ),\r\n                Text(\"-\"),\r\n                Text(\r\n                  to,\r\n                  style: TextStyle(fontSize: 13),\r\n                ),\r\n              ],\r\n            ),\r\n            Row(\r\n              mainAxisAlignment: MainAxisAlignment.end,\r\n              children: [\r\n                Text(\r\n                  status,\r\n                  style: TextStyle(fontSize: 15),\r\n                ),\r\n              ],\r\n            ),\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n            Text(\r\n              desc,\r\n              style: TextStyle(fontSize: 15),\r\n            ),\r\n            SizedBox(\r\n              height: 8,\r\n            ),\r\n            Container(\r\n              height: 1,\r\n              color: Colors.black45,\r\n              padding: EdgeInsets.symmetric(horizontal: 50),\r\n            ),\r\n\r\n          ],\r\n        ));\r\n  }\r\n\r\n  Widget SkillContainer(String field, String level) {\r\n    return Container(\r\n        padding: EdgeInsets.all(25),\r\n        decoration: BoxDecoration(\r\n          borderRadius: BorderRadius.circular(10),\r\n          color: Colors.blue.shade100,\r\n        ),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              field,\r\n              style: TextStyle(fontSize: 20, fontWeight: FontWeight.w400),\r\n            ),\r\n            SizedBox(\r\n              height: 5,\r\n            ),\r\n            Row(\r\n              children: [\r\n                Container(\r\n                  padding: EdgeInsets.only(right: 60),\r\n                  height: 10,\r\n                  width: (MediaQuery.of(context).size.width / 1.8) *\r\n                      (int.parse(level) / 100),\r\n                  decoration: BoxDecoration(\r\n                      color: Colors.blue,\r\n                      borderRadius: BorderRadius.circular(5)),\r\n                ),\r\n                SizedBox(\r\n                  width: 5,\r\n                ),\r\n                Text(\r\n                  \"$level %\",\r\n                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),\r\n                )\r\n              ],\r\n            ),\r\n            SizedBox(\r\n              height: 15,\r\n            ),\r\n          ],\r\n        ));\r\n  }\r\n\r\n  Widget EducationContainer(String degree, String institute, String from,\r\n      String to, String status, String desc) {\r\n    return Container(\r\n        padding: EdgeInsets.all(25),\r\n        decoration: BoxDecoration(\r\n          borderRadius: BorderRadius.circular(10),\r\n          color: Colors.blue.shade100,\r\n        ),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              degree,\r\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n            ),\r\n            Row(\r\n              children: [\r\n                Flexible(\r\n                  child: Text(\r\n                    institute,\r\n                    style: TextStyle(fontSize: 17, fontWeight: FontWeight.bold),\r\n                  ),\r\n                ),\r\n                SizedBox(\r\n                  width: 50,\r\n                ),\r\n                Text(\r\n                  from,\r\n                  style: TextStyle(fontSize: 13),\r\n                ),\r\n                Text(\"-\"),\r\n                Text(\r\n                  to,\r\n                  style: TextStyle(fontSize: 13),\r\n                ),\r\n              ],\r\n            ),\r\n            Row(\r\n              mainAxisAlignment: MainAxisAlignment.end,\r\n              children: [\r\n                Text(\r\n                  status,\r\n                  style: TextStyle(fontSize: 15),\r\n                ),\r\n              ],\r\n            ),\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n            Text(\r\n              desc,\r\n              style: TextStyle(fontSize: 15),\r\n            ),\r\n            SizedBox(\r\n              height: 8,\r\n            ),\r\n            Container(\r\n              height: 1,\r\n              color: Colors.black45,\r\n              padding: EdgeInsets.symmetric(horizontal: 50),\r\n            ),\r\n\r\n          ],\r\n        ));\r\n  }\r\n\r\n  Widget ProjectContainer(String name, String link, String from, String to,\r\n      String status, String desc) {\r\n    return Container(\r\n        padding: EdgeInsets.all(25),\r\n        decoration: BoxDecoration(\r\n          borderRadius: BorderRadius.circular(10),\r\n          color: Colors.blue.shade100,\r\n        ),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              name,\r\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n            ),\r\n            Text(\r\n              link,\r\n              style: TextStyle(fontSize: 17, fontWeight: FontWeight.bold),\r\n            ),\r\n            Row(\r\n              mainAxisAlignment: MainAxisAlignment.end,\r\n              children: [\r\n                Text(\r\n                  from,\r\n                  style: TextStyle(fontSize: 13),\r\n                ),\r\n                Text(\"-\"),\r\n                Text(\r\n                  to,\r\n                  style: TextStyle(fontSize: 13),\r\n                ),\r\n              ],\r\n            ),\r\n            Row(\r\n              mainAxisAlignment: MainAxisAlignment.end,\r\n              children: [\r\n                Text(\r\n                  status,\r\n                  style: TextStyle(fontSize: 15),\r\n                ),\r\n              ],\r\n            ),\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n            Text(\r\n              desc,\r\n              style: TextStyle(fontSize: 15),\r\n            ),\r\n            SizedBox(\r\n              height: 8,\r\n            ),\r\n            Container(\r\n              height: 1,\r\n              color: Colors.black45,\r\n              padding: EdgeInsets.symmetric(horizontal: 50),\r\n            ),\r\n\r\n          ],\r\n        ));\r\n  }\r\n\r\n  Widget AchievementContainer(\r\n      String title, String year, String issuer, String desc) {\r\n    return Container(\r\n        decoration: BoxDecoration(\r\n          borderRadius: BorderRadius.circular(10),\r\n          color: Colors.blue.shade100,\r\n        ),\r\n        padding: EdgeInsets.all(15),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Text(\r\n              name,\r\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n            ),\r\n            Text(\r\n              issuer,\r\n              style: TextStyle(fontSize: 17, fontWeight: FontWeight.bold),\r\n            ),\r\n            SizedBox(\r\n              height: 10,\r\n            ),\r\n            Text(\r\n              desc,\r\n              style: TextStyle(fontSize: 15),\r\n            ),\r\n            SizedBox(\r\n              height: 8,\r\n            ),\r\n            Container(\r\n              height: 1,\r\n              color: Colors.black45,\r\n              padding: EdgeInsets.symmetric(horizontal: 50),\r\n            ),\r\n\r\n          ],\r\n        ));\r\n  }\r\n\r\n  //====================================================================\r\n  void initiateFacebookLogin(context) async {\r\n    final result = await  FacebookAuth.instance.login();\r\n    final FacebookAuthCredential facebookAuthCredential =\r\n      FacebookAuthProvider.credential(result.token);\r\n    await _auth.signInWithCredential(facebookAuthCredential);\r\n          print(_auth.currentUser);\r\n           final User user = _auth.currentUser;\r\n           var dio=Dio();\r\n  print(\"bye\");\r\n  var res;\r\n  var phoneNumber;\r\n  if (user != null) {\r\n    assert(!user.isAnonymous);\r\n    assert(await user.getIdToken() != null);\r\n\r\n    var currentUser = _auth.currentUser;\r\n    print(currentUser);\r\n    print(user);\r\n    Map<String,dynamic> currentUser1={\"uid\":currentUser.uid,\"xa\":currentUser.refreshToken,\"displayName\":currentUser.displayName,\"email\":currentUser.email,\"photoURL\":currentUser.photoURL,\"username\":\"\",\"phoneNumber\":\"\"};\r\n    assert(user.uid == currentUser1['uid']);\r\n    try {\r\n        var emailCheck = await dio.post(\r\n          \"https://us-central1-fyi-vitc.cloudfunctions.net/api/auth/emailCheck\",\r\n          data:{ \"email\": currentUser1[\"email\"] }\r\n        );\r\n        print(emailCheck.data['username']);\r\n        username=emailCheck.data['username'];\r\n        username=emailCheck.data['username'];\r\n        var body = {\r\n          \"facebook\": true,\r\n          \"token\": await currentUser.getIdToken(),\r\n          \"username\": username,\r\n          \"name\": currentUser1['displayName'],\r\n          \"email\": currentUser1['email'],\r\n          \"picture\": currentUser1['photoURL'],\r\n          \"phone\": phoneNumber,\r\n        };\r\n        print(\"body\");\r\n        print(body);\r\n        name=username;    //login.name\r\n        phone=phoneNumber;\r\n        email=currentUser1['email'];\r\n        image=currentUser1['photoURL'];\r\n        res = await dio.post(\r\n          \"https://us-central1-fyi-vitc.cloudfunctions.net/api/auth/userLogin\",\r\n          data:body,\r\n        );\r\n        print(\"res\");\r\n        print(res);\r\n\r\n        print('signInWithFacebook succeeded: $res');\r\n        CheckloggedInFB();\r\n        det = user.displayName;\r\n        username=det;\r\n        print(\"usernamy $username\");\r\n        token=res.data['token'];\r\n      }\r\n      catch(err) {\r\n        print(err);\r\n        var value = await prompt(context,title:Text(\"Enter a unique username\"));\r\n        while (true) {\r\n          try {\r\n            await dio.get(\r\n              \"https://us-central1-fyi-vitc.cloudfunctions.net/api/auth/checkUsernameAvailability/\" +\r\n                value\r\n            );\r\n            break;\r\n          } catch (err) {\r\n            value = await prompt(context,\r\n              title:Text(value + \" is Not available. Please try another one\")\r\n            );\r\n          }\r\n        }\r\n        username=value;\r\n        name=value;    //login.name\r\n        phoneNumber = user.phoneNumber;\r\n        email=currentUser1['email'];\r\n        image=currentUser1['photoURL'];\r\n        if (currentUser1['phoneNumber']=='' || currentUser1['phoneNumber']==null) {\r\n          phoneNumber = await prompt(context,title:Text(\"Enter your Mobile Number\"));\r\n          var phone = \"+91\" + phoneNumber;\r\n          // phone=user.phoneNumber;\r\n          print(phone);\r\n          print(phoneNumber);\r\n          await _auth.verifyPhoneNumber(phoneNumber: phone,\r\n           verificationCompleted:(cred){\r\n             },\r\n             verificationFailed: (e){\r\n               print(e.toString());\r\n               print(\"error phone\");\r\n              },\r\n              codeSent: (String verificationId, int resendToken) async {\r\n                String smsCode = await prompt(context,title:Text(\"Enter the OTP sent to your phone Number\"));\r\n                PhoneAuthCredential phoneAuthCredential = PhoneAuthProvider.credential(verificationId: verificationId, smsCode: smsCode);\r\n                print(\"phoneAuthCredential\"+phoneAuthCredential.toString());\r\n                await _auth.currentUser.linkWithCredential(phoneAuthCredential);\r\n                var body = {\r\n                \"facebook\": true,\r\n                \"token\": await currentUser.getIdToken(),\r\n                \"username\": username,\r\n                \"name\": currentUser1['displayName'],\r\n                \"email\": currentUser1['email'],\r\n                \"picture\": currentUser1['photoURL'],\r\n                \"phone\": phoneNumber,\r\n              };\r\n                print(\"body\");\r\n              print(body);\r\n\r\n              res = await dio.post(\r\n                \"https://us-central1-fyi-vitc.cloudfunctions.net/api/auth/userLogin\",\r\n                data:body,\r\n              );\r\n              print(\"res\");\r\n              print(res);\r\n\r\n                print('signInWithFacebook succeeded: $res');\r\n                CheckloggedInFB();\r\n                super_signin=1;\r\n                det =username;\r\n                name=value;    //login.name\r\n                phone=user.phoneNumber;\r\n                email=currentUser1['email'];\r\n                image=currentUser1['photoURL'];\r\n              },\r\n              codeAutoRetrievalTimeout: (a)=>{print(2)}\r\n            );\r\n          print(\"auth\");\r\n        }\r\n      }\r\n  }\r\n    Prefusername(username);\r\n    await gethttp(username);\r\n    String phone_string = phone.toString();\r\n    Navigator.of(context).push(\r\n            MaterialPageRoute(\r\n              builder: (context) {\r\n                return Testing(username,about,dob,finaledu,email,finalexp,image,name,phone_string,finalskill,experienceexpandlist,skillexpandlist,educationexpandlist,achievementexpandlist,projectexpandlist,finalachievement,finalproject);\r\n              },\r\n            ),\r\n          );\r\n        }\r\n\r\n  \r\n\r\n  void onLoginStatusChanged(bool isLoggedIn) {\r\n    setState(() {\r\n      isLoggedIn = isLoggedIn;\r\n      CheckloggedInGoogle();\r\n    });\r\n  }\r\n\r\n  //=====================================================================\r\n  var loggedIn = false;\r\n  var firebaseAuth = FirebaseAuth.instance;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: Color(0xfff1f1f1),\r\n      body: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          Container(\r\n            // color: Colors.white,\r\n            child: Center(\r\n              child: Column(\r\n                mainAxisSize: MainAxisSize.max,\r\n                mainAxisAlignment: MainAxisAlignment.center,\r\n                children: <Widget>[\r\n                  // FlutterLogo(size: 150),\r\n                  Image(image: AssetImage(\"images/fyi.png\"), height: 210.0),\r\n                  Text(\r\n                    'Fraternity of Young Innovators',\r\n                    style: TextStyle(\r\n                        fontSize: 20,\r\n                        color: Colors.black87,\r\n                        fontWeight: FontWeight.w300),\r\n                  ),\r\n                  SizedBox(height: 5),\r\n                  Text(\r\n                    'Emerge | Innovate | Lead',\r\n                    style: TextStyle(\r\n                        fontSize: 18,\r\n                        color: Colors.grey,\r\n                        fontWeight: FontWeight.w300),\r\n                  ),\r\n                  SizedBox(height: 30),\r\n                  _googleSignInButton(),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n          Padding(\r\n            padding: const EdgeInsets.only(top: 20),\r\n            child: Container(\r\n                child: Center(\r\n              child: loggedIn\r\n                  ? Text(\"Logged In! :)\",\r\n                      style: TextStyle(color: Colors.white, fontSize: 40))\r\n                  : Stack(\r\n                      children: <Widget>[\r\n                        Container(\r\n                          child: Center(\r\n                            child: _facebookLoginButton(),\r\n                          ),\r\n                        )\r\n                      ],\r\n                    ),\r\n            )),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _googleSignInButton() {\r\n    return OutlineButton(\r\n      splashColor: Colors.blue,\r\n      onPressed: () async {\r\n        signInWithGoogle(context).then((result) async {\r\n          if (result != null) {\r\n            await gethttp(det);\r\n            Prefusername(det);\r\n            Navigator.of(context).push(\r\n              MaterialPageRoute(\r\n                builder: (context) {\r\n                  return Testing(username,about,dob,finaledu,email,finalexp,image,name,phone,finalskill,experienceexpandlist,skillexpandlist,educationexpandlist,achievementexpandlist,projectexpandlist,finalachievement,finalproject);\r\n                },\r\n              ),\r\n            );\r\n          }\r\n        });\r\n      },\r\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(40)),\r\n      highlightElevation: 0,\r\n      borderSide: BorderSide(color: Colors.blue),\r\n      child: Padding(\r\n        padding: const EdgeInsets.fromLTRB(0, 10, 0, 10),\r\n        child: Row(\r\n          mainAxisSize: MainAxisSize.min,\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: <Widget>[\r\n            Image(image: AssetImage(\"images/google_logo.png\"), height: 35.0),\r\n            Padding(\r\n              padding: const EdgeInsets.only(left: 10),\r\n              child: Text(\r\n                'Sign in with Google',\r\n                style: TextStyle(\r\n                  fontSize: 20,\r\n                  color: Colors.grey,\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  OutlineButton _facebookLoginButton() {\r\n    return OutlineButton(\r\n      splashColor: Colors.blue,\r\n      onPressed: () {\r\n        initiateFacebookLogin(context);\r\n      },\r\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(40)),\r\n      highlightElevation: 0,\r\n      borderSide: BorderSide(color: Colors.blue),\r\n      child: Padding(\r\n        padding: const EdgeInsets.fromLTRB(0, 10, 0, 10),\r\n        child: Row(\r\n          mainAxisSize: MainAxisSize.min,\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: <Widget>[\r\n            Image(image: AssetImage(\"images/fbiconbig.png\"), height: 40.0),\r\n            Padding(\r\n              padding: const EdgeInsets.only(left: 10),\r\n              child: Text(\r\n                'Sign in with Facebook',\r\n                style: TextStyle(\r\n                  fontSize: 20,\r\n                  color: Colors.grey,\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../fyi_main2_2_1/lib/login_page.dart	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/lib/login_page.dart	(date 1616998770779)
@@ -35,7 +35,7 @@
 var skillsJson;
 var projectsJson;
 var dob;
-var phone;
+String phone;
 var name;
 var achievementsJson;
 var image;
@@ -307,35 +307,34 @@
       userloginname=username;
       print("USERNAME101 $username");
       response = await dio.get(
-        "https://us-central1-fyi-vitc.cloudfunctions.net/api/profile/maddyFB",
+        "https://us-central1-fyi-vitc.cloudfunctions.net/api/profile/$username",
         queryParameters: {"x-auth-token": token}, //?x-auth-token=$token
       );
       print("GETHHTTP fucntion print -> $response");
       var body = response.data;
       // final ids = json.decode(response.data);
       print(body);
-      print("see here");
+      print("see here 1");
       about = body['about'];
       print(about);
       educationJson = body['education'];
-      print("see here");
+      print("see here 2");
 
       skillsJson = body['skills'];
-      print("see here");
+      print("see here 3");
 
       projectsJson = body['projects'];
-      print("see here");
+      print("see here 4");
 
       achievementsJson = body['achievements'];
       experienceJson = body['experience'];
-      print("see here");
+      print("see here 5");
 
 
-      print("see here");
 
       dob = body['dob'];
       print("see here");
-      phone = body['phone'];
+      phone = body['phone'].toString();
       name = body['name'];
       image = body['picture'];
       email = body['email'];
@@ -344,7 +343,7 @@
       var tempedu = educationJson;
       var tempach = achievementsJson;
       var temppro = projectsJson;
-      print("see here");
+      print("see here 6");
 
       print(projectsJson);
       finalexp = tempexperience
@@ -376,7 +375,7 @@
             finalexp[i].description));
       }
       for (int i = 0; i < finalskill.length; i++) {
-        print("hello");
+        print("hello 7");
         skillexpandlist
             .add(SkillContainer(finalskill[i].field, finalskill[i].level.toString()));
       }
@@ -423,106 +422,106 @@
     }
   }
 
-  Future<void> getcache(String userloginname) async {
-    var cacheDir = await getTemporaryDirectory();
-    print("getcache");
-    if (await File(cacheDir.path + "/" + fileName).exists()) {
-      print("Loading from cache");
-      var cachedata = File(cacheDir.path + "/" + fileName).readAsStringSync();
-      var cachedata1 = json.decode(cachedata);
-      print(cachedata1);
-      var body = cachedata1;
-      // final ids = json.decode(response.data);
-      educationJson = body['education'];
-      about = body['about'];
-      skillsJson = body['skills'];
-      projectsJson = body['projects'];
-      dob = body['dob'];
-      phone = body['phone'];
-      name = body['name'];
-      achievementsJson = body['achievements'];
-      image = body['picture'];
-      email = body['email'];
-      experienceJson = body['experience'];
-      print(experienceJson.toString());
-      var tempexperience = experienceJson;
-      var tempskill = skillsJson;
-      var tempedu = educationJson;
-      var tempach = achievementsJson;
-      var temppro = projectsJson;
-      finalexp = tempexperience
-          .map<ExperienceList>((json) => ExperienceList.fromJson(json))
-          .toList();
-      finaledu = tempedu
-          .map<EducationList>((json) => EducationList.fromJson(json))
-          .toList();
-      finalskill = tempskill
-          .map<SkillsList>((json) => SkillsList.fromJson(json))
-          .toList();
-      finalproject = temppro
-          .map<ProjectList>((json) => ProjectList.fromJson(json))
-          .toList();
-      finalachievement = tempach
-          .map<AchievementList>((json) => AchievementList.fromJson(json))
-          .toList();
-      for (int i = 0; i < finalexp.length; i++) {
-        if (finalexp[i].status.toLowerCase() == "completed") {
-          finalexp[i].status = " ";
-        }
-        experienceexpandlist.add(ExperienceContainer(
-            finalexp[i].organization,
-            finalexp[i].post,
-            finalexp[i].from,
-            finalexp[i].to,
-            finalexp[i].status,
-            finalexp[i].description));
-      }
-      for (int i = 0; i < finalskill.length; i++) {
-        skillexpandlist
-            .add(SkillContainer(finalskill[i].field, finalskill[i].level));
-      }
-      for (int i = 0; i < finaledu.length; i++) {
-        if (finaledu[i].status.toLowerCase() == "completed") {
-          finaledu[i].status = " ";
-        }
-        educationexpandlist.add(EducationContainer(
-            finaledu[i].degree,
-            finaledu[i].institute,
-            finaledu[i].from,
-            finaledu[i].to,
-            finaledu[i].status,
-            finaledu[i].description));
-      }
-      for (int i = 0; i < finalachievement.length; i++) {
-        achievementexpandlist.add(AchievementContainer(
-            finalachievement[i].title,
-            finalachievement[i].year,
-            finalachievement[i].issuer,
-            finalachievement[i].description));
-      }
-      for (int i = 0; i < finalproject.length; i++) {
-        print("HOLA");
-        if (finalproject[i].status.toLowerCase() == "completed") {
-          finalproject[i].status = " ";
-        }
-        projectexpandlist.add(ProjectContainer(
-            finalproject[i].name,
-            finalproject[i].link,
-            finalproject[i].from,
-            finalproject[i].to,
-            finalproject[i].status,
-            finalproject[i].description));
-      }
-      print("found");
-      print(finalexp[0].organization);
-      print(image);
-    }
-    //TODO: If the Json file does not exist, then make the API Call
-    else {
-      Prefusername(det);
-      gethttp(det);
-    }
-  }
+  // Future<void> getcache(String userloginname) async {
+  //   var cacheDir = await getTemporaryDirectory();
+  //   print("getcache");
+  //   if (await File(cacheDir.path + "/" + fileName).exists()) {
+  //     print("Loading from cache");
+  //     var cachedata = File(cacheDir.path + "/" + fileName).readAsStringSync();
+  //     var cachedata1 = json.decode(cachedata);
+  //     print(cachedata1);
+  //     var body = cachedata1;
+  //     // final ids = json.decode(response.data);
+  //     educationJson = body['education'];
+  //     about = body['about'];
+  //     skillsJson = body['skills'];
+  //     projectsJson = body['projects'];
+  //     dob = body['dob'];
+  //     phone = body['phone'];
+  //     name = body['name'];
+  //     achievementsJson = body['achievements'];
+  //     image = body['picture'];
+  //     email = body['email'];
+  //     experienceJson = body['experience'];
+  //     print(experienceJson.toString());
+  //     var tempexperience = experienceJson;
+  //     var tempskill = skillsJson;
+  //     var tempedu = educationJson;
+  //     var tempach = achievementsJson;
+  //     var temppro = projectsJson;
+  //     finalexp = tempexperience
+  //         .map<ExperienceList>((json) => ExperienceList.fromJson(json))
+  //         .toList();
+  //     finaledu = tempedu
+  //         .map<EducationList>((json) => EducationList.fromJson(json))
+  //         .toList();
+  //     finalskill = tempskill
+  //         .map<SkillsList>((json) => SkillsList.fromJson(json))
+  //         .toList();
+  //     finalproject = temppro
+  //         .map<ProjectList>((json) => ProjectList.fromJson(json))
+  //         .toList();
+  //     finalachievement = tempach
+  //         .map<AchievementList>((json) => AchievementList.fromJson(json))
+  //         .toList();
+  //     for (int i = 0; i < finalexp.length; i++) {
+  //       if (finalexp[i].status.toLowerCase() == "completed") {
+  //         finalexp[i].status = " ";
+  //       }
+  //       experienceexpandlist.add(ExperienceContainer(
+  //           finalexp[i].organization,
+  //           finalexp[i].post,
+  //           finalexp[i].from,
+  //           finalexp[i].to,
+  //           finalexp[i].status,
+  //           finalexp[i].description));
+  //     }
+  //     for (int i = 0; i < finalskill.length; i++) {
+  //       skillexpandlist
+  //           .add(SkillContainer(finalskill[i].field, finalskill[i].level));
+  //     }
+  //     for (int i = 0; i < finaledu.length; i++) {
+  //       if (finaledu[i].status.toLowerCase() == "completed") {
+  //         finaledu[i].status = " ";
+  //       }
+  //       educationexpandlist.add(EducationContainer(
+  //           finaledu[i].degree,
+  //           finaledu[i].institute,
+  //           finaledu[i].from,
+  //           finaledu[i].to,
+  //           finaledu[i].status,
+  //           finaledu[i].description));
+  //     }
+  //     for (int i = 0; i < finalachievement.length; i++) {
+  //       achievementexpandlist.add(AchievementContainer(
+  //           finalachievement[i].title,
+  //           finalachievement[i].year,
+  //           finalachievement[i].issuer,
+  //           finalachievement[i].description));
+  //     }
+  //     for (int i = 0; i < finalproject.length; i++) {
+  //       print("HOLA");
+  //       if (finalproject[i].status.toLowerCase() == "completed") {
+  //         finalproject[i].status = " ";
+  //       }
+  //       projectexpandlist.add(ProjectContainer(
+  //           finalproject[i].name,
+  //           finalproject[i].link,
+  //           finalproject[i].from,
+  //           finalproject[i].to,
+  //           finalproject[i].status,
+  //           finalproject[i].description));
+  //     }
+  //     print("found");
+  //     print(finalexp[0].organization);
+  //     print(image);
+  //   }
+  //   //TODO: If the Json file does not exist, then make the API Call
+  //   else {
+  //     Prefusername(det);
+  //     gethttp(det);
+  //   }
+  // }
 
   Widget ExperienceContainer(String title, String post, String from, String to,
       String status, String desc) {
@@ -989,24 +988,24 @@
               ),
             ),
           ),
-          Padding(
-            padding: const EdgeInsets.only(top: 20),
-            child: Container(
-                child: Center(
-              child: loggedIn
-                  ? Text("Logged In! :)",
-                      style: TextStyle(color: Colors.white, fontSize: 40))
-                  : Stack(
-                      children: <Widget>[
-                        Container(
-                          child: Center(
-                            child: _facebookLoginButton(),
-                          ),
-                        )
-                      ],
-                    ),
-            )),
-          ),
+          // Padding(
+          //   padding: const EdgeInsets.only(top: 20),
+          //   child: Container(
+          //       child: Center(
+          //     child: loggedIn
+          //         ? Text("Logged In! :)",
+          //             style: TextStyle(color: Colors.white, fontSize: 40))
+          //         : Stack(
+          //             children: <Widget>[
+          //               Container(
+          //                 child: Center(
+          //                   child: _facebookLoginButton(),
+          //                 ),
+          //               )
+          //             ],
+          //           ),
+          //   )),
+          // ),
         ],
       ),
     );
Index: ../fyi_main2_2_1/lib/profilepage.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:convert';\r\n\r\nimport 'package:flutter/cupertino.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:fyi_main2_2_1/demo.dart';\r\nimport 'package:fyi_main2_2_1/profile_loader.dart';\r\n\r\nimport 'login_page.dart' as login;\r\nimport 'package:dio/dio.dart';\r\nvar det=login.det;\r\nvar imagepadtop = 50.0;\r\nvar formattedDate;\r\nString fileName = \"CacheData.json\";\r\nList<login.ExperienceList> finalexp;\r\nList<login.EducationList> finaledu;\r\nList<login.SkillsList> finalskill;\r\nList<login.ProjectList> finalproject;\r\nList<login.AchievementList> finalachieve;\r\nList<Widget> experienceexpandlist = new List();\r\nList<Widget> skillexpandlist = new List();\r\nList<Widget> educationexpandlist = new List();\r\nList<Widget> projectexpandlist = new List();\r\nList<Widget> achievementexpandlist = new List();\r\nList<Expanditem> items;\r\nResponse response;\r\n// String token =\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiN0ozTGlhOElrb05wNTFRY2t4UUlQZWN4WmJIMyJ9LCJpYXQiOjE2MDY5MzQ5NDJ9.Kmk_vx_OClEYGNj6uf7gcyqAm-4f-oORCS6_dRjcC8E\";\r\n// \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiN0ozTGlhOElrb05wNTFRY2t4UUlQZWN4WmJIMyJ9LCJpYXQiOjE2MDY5MzU2NDd9.nKv_fGu0sIQZJ_wpCf1NwNlcwob4F_XBoCH6JsAek3A\"\r\nString token = login.token;\r\ndouble contheight = 300;\r\nvar educationJson;\r\nvar about;\r\nvar skillsJson;\r\nvar projectsJson;\r\nvar dob;\r\nvar phone;\r\nvar name;\r\nvar achievementsJson;\r\nvar image;\r\nvar email;\r\nvar experienceJson;\r\ndouble eduHeight = 200;\r\ndouble expHeight = 200;\r\ndouble skiHeight = 200;\r\ndouble achHeight = 200;\r\ndouble proHeight = 200;\r\n\r\nclass Expanditem {\r\n  bool isExpanded;\r\n  final String header;\r\n  final Widget body;\r\n  final Icon iconpic;\r\n  Expanditem(this.isExpanded, this.header, this.body, this.iconpic);\r\n}\r\n\r\nclass ProfileScreen extends StatefulWidget {\r\n  String kname;\r\n  String kimage;\r\n  String kemail;\r\n  String kphone;\r\n  String kdob;\r\n  String kabout;\r\n  List<login.EducationList> kedulist;\r\n  List<login.SkillsList> kskilllist;\r\n  List<login.ExperienceList> kexplist;\r\n  List<login.AchievementList> kachlist;\r\n  List<login.ProjectList> kprolist;\r\n\r\n  List<Widget> experiencewidget;\r\n  List<Widget> skillwidget;\r\n  List<Widget> educationwidget;\r\n  List<Widget> achievementwidget;\r\n  List<Widget> projectwidget;\r\n  ProfileScreen(\r\n      this.kabout,\r\n      this.kdob,\r\n      this.kedulist,\r\n      this.kemail,\r\n      this.kexplist,\r\n      this.kimage,\r\n      this.kname,\r\n      this.kphone,\r\n      this.kskilllist,\r\n      this.experiencewidget,\r\n      this.skillwidget,\r\n      this.educationwidget,\r\n      this.achievementwidget,\r\n      this.projectwidget,\r\n      this.kachlist,\r\n      this.kprolist);\r\n  @override\r\n  _ProfileScreenState createState() => _ProfileScreenState();\r\n}\r\n\r\nclass EduTag {\r\n  String degree;\r\n  String institute;\r\n  String from;\r\n  String to;\r\n  String status;\r\n  String desc;\r\n\r\n  EduTag(\r\n      this.degree, this.institute, this.from, this.to, this.status, this.desc);\r\n\r\n  Map toJson() => {\r\n        \"degree\": degree,\r\n        \"description\": desc,\r\n        \"from\": from,\r\n        \"to\": to,\r\n        \"status\": status,\r\n        \"institute\": institute,\r\n      };\r\n}\r\n\r\nclass ExpTag {\r\n  String organization;\r\n  String post;\r\n  String from;\r\n  String to;\r\n  String status;\r\n  String desc;\r\n\r\n  ExpTag(\r\n      this.organization, this.post, this.from, this.to, this.status, this.desc);\r\n\r\n  Map toJson() => {\r\n        \"organization\": organization,\r\n        \"description\": desc,\r\n        \"from\": from,\r\n        \"to\": to,\r\n        \"status\": status,\r\n        \"post\": post,\r\n      };\r\n}\r\n\r\nclass SkillsTag {\r\n  String field;\r\n  int value;\r\n\r\n  SkillsTag(this.field, this.value);\r\n\r\n  Map toJson() => {\r\n        \"field\": field,\r\n        \"level\": value,\r\n      };\r\n}\r\n\r\nclass ProjectsTag {\r\n  String status;\r\n  String to;\r\n  String from;\r\n  String link;\r\n  String desc;\r\n  String name;\r\n\r\n  ProjectsTag(this.desc, this.status, this.from, this.to, this.link, this.name);\r\n\r\n  Map toJson() => {\r\n        \"description\": desc,\r\n        \"status\": status,\r\n        \"from\": from,\r\n        \"to\": to,\r\n        \"link\": link,\r\n        \"name\": name,\r\n      };\r\n}\r\n\r\nclass AchieveTag {\r\n  String issuer;\r\n  String year;\r\n  String desc;\r\n  String title;\r\n\r\n  AchieveTag(this.desc, this.title, this.year, this.issuer);\r\n\r\n  Map toJson() => {\r\n        \"description\": desc,\r\n        \"title\": title,\r\n        \"year\": year,\r\n        \"issuer\": issuer,\r\n      };\r\n}\r\n\r\nclass _ProfileScreenState extends State<ProfileScreen> {\r\n  @override\r\n  void initState() {\r\n    print(\"TOKEN: ${login.token}\");\r\n    name = widget.kname;\r\n    phone = widget.kphone;\r\n    image = widget.kimage;\r\n    email = widget.kemail;\r\n    dob = widget.kdob;\r\n    about = widget.kabout;\r\n    finaledu = widget.kedulist;\r\n    finalskill = widget.kskilllist;\r\n    finalexp = widget.kexplist;\r\n    finalachieve = widget.kachlist;\r\n    finalproject = widget.kprolist;\r\n    experienceexpandlist = widget.experiencewidget;\r\n    skillexpandlist = widget.skillwidget;\r\n    educationexpandlist = widget.educationwidget;\r\n    achievementexpandlist = widget.achievementwidget;\r\n    projectexpandlist = widget.projectwidget;\r\n\r\n    print(projectexpandlist.length);\r\n    print(experienceexpandlist.length);\r\n    print(skillexpandlist.length);\r\n    // print(finalexp[0].organization);\r\n    // print(widget.kexplist[0].organization);\r\n    print(image);\r\n    print(widget.kimage);\r\n\r\n    super.initState();\r\n    items = <Expanditem>[\r\n      Expanditem(\r\n          false, // isExpanded ?\r\n          'Education', // header\r\n          Padding(\r\n              padding: EdgeInsets.all(8.0),\r\n              child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: <Widget>[\r\n                    ListView.builder(\r\n                        shrinkWrap: true,\r\n                        physics: NeverScrollableScrollPhysics(),\r\n                        itemCount: educationexpandlist.length,\r\n                        itemBuilder: (context, int index) {\r\n                          Widget widget = educationexpandlist.elementAt(index);\r\n                          return widget;\r\n                        })\r\n                    // functioneducation(),\r\n                  ])), // body\r\n          Icon(\r\n            Icons.school,\r\n            color: Colors.blue,\r\n          ) // iconPic\r\n          ),\r\n      Expanditem(\r\n          false, // isExpanded ?\r\n          'Experience', // header\r\n          Padding(\r\n              padding: EdgeInsets.all(8.0),\r\n              child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: <Widget>[\r\n                    ListView.builder(\r\n                        shrinkWrap: true,\r\n                        physics: NeverScrollableScrollPhysics(),\r\n                        itemCount: experienceexpandlist.length,\r\n                        itemBuilder: (context, int index) {\r\n                          Widget widget = experienceexpandlist.elementAt(index);\r\n                          return widget;\r\n                        })\r\n                  ])), // body\r\n          Icon(\r\n            Icons.work,\r\n            color: Colors.blue,\r\n          ) // iconPic\r\n          ),\r\n      Expanditem(\r\n          false, // isExpanded ?\r\n          'Skills', // header\r\n          Padding(\r\n              padding: EdgeInsets.all(8.0),\r\n              child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: <Widget>[\r\n                    ListView.builder(\r\n                        shrinkWrap: true,\r\n                        physics: NeverScrollableScrollPhysics(),\r\n                        itemCount: skillexpandlist.length,\r\n                        itemBuilder: (context, int index) {\r\n                          Widget widget = skillexpandlist.elementAt(index);\r\n                          return widget;\r\n                        })\r\n                    // functioneducation(),\r\n                  ])), // body\r\n          Icon(\r\n            Icons.star,\r\n            color: Colors.blue,\r\n          ) // iconPic\r\n          ),\r\n      Expanditem(\r\n          false, // isExpanded ?\r\n          'Achievements', // header\r\n          Padding(\r\n              padding: EdgeInsets.all(8.0),\r\n              child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: <Widget>[\r\n                    ListView.builder(\r\n                        shrinkWrap: true,\r\n                        physics: NeverScrollableScrollPhysics(),\r\n                        itemCount: achievementexpandlist.length,\r\n                        itemBuilder: (context, int index) {\r\n                          Widget widget =\r\n                              achievementexpandlist.elementAt(index);\r\n                          return widget;\r\n                        })\r\n                    // functioneducation(),\r\n                  ])), // body\r\n          Icon(\r\n            Icons.stars,\r\n            color: Colors.blue,\r\n          ) // iconPic\r\n          ),\r\n      Expanditem(\r\n          false, // isExpanded ?\r\n          'Projects', // header\r\n          Padding(\r\n              padding: EdgeInsets.all(8.0),\r\n              child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: <Widget>[\r\n                    ListView.builder(\r\n                        shrinkWrap: true,\r\n                        physics: NeverScrollableScrollPhysics(),\r\n                        itemCount: projectexpandlist.length,\r\n                        itemBuilder: (context, int index) {\r\n                          Widget widget = projectexpandlist.elementAt(index);\r\n                          return widget;\r\n                        })\r\n                  ])), // body\r\n          Icon(\r\n            Icons.post_add,\r\n            color: Colors.blue,\r\n          ) // iconPic\r\n          ),\r\n    ];\r\n  }\r\n\r\n  Widget _profileText() {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(20.0),\r\n      child: Text(\r\n        about,\r\n        style: TextStyle(\r\n          fontSize: 18.0,\r\n          letterSpacing: 1.0,\r\n          color: Colors.black87,\r\n          fontWeight: FontWeight.w300,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _circleAvatar() {\r\n    return Padding(\r\n      padding: const EdgeInsets.only(top: 50),\r\n      child: Container(\r\n        width: MediaQuery.of(context).size.width / 2,\r\n        height: MediaQuery.of(context).size.width / 2,\r\n        padding: EdgeInsets.all(10.0),\r\n        decoration: BoxDecoration(\r\n          border: Border.all(color: Colors.white, width: 5),\r\n          shape: BoxShape.circle,\r\n          color: Colors.white,\r\n          image: DecorationImage(\r\n            fit: BoxFit.cover,\r\n            image: NetworkImage(widget.kimage),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _textFormFieldCalling() {\r\n    List_Criteria = Column(\r\n      children: [\r\n        ExpansionPanelList(\r\n          elevation: 0,\r\n          dividerColor: Colors.white,\r\n          expansionCallback: (int index, bool isExpanded) {\r\n            setState(() {\r\n              items[index].isExpanded = !items[index].isExpanded;\r\n            });\r\n          },\r\n          children: items.map((Expanditem item) {\r\n            return ExpansionPanel(\r\n              canTapOnHeader: true,\r\n              headerBuilder: (BuildContext context, bool isExpanded) {\r\n                return Container(\r\n                  child: ListTile(\r\n                      leading: item.iconpic,\r\n                      title: Text(\r\n                        item.header,\r\n                        textAlign: TextAlign.left,\r\n                        style: TextStyle(\r\n                          fontSize: 18.0,\r\n                          fontWeight: FontWeight.w300,\r\n                        ),\r\n                      )),\r\n                );\r\n              },\r\n              isExpanded: item.isExpanded,\r\n              body: item.body,\r\n            );\r\n          }).toList(),\r\n        ),\r\n      ],\r\n    );\r\n    return Padding(\r\n      padding: const EdgeInsets.only(left: 20, right: 20),\r\n      child: SingleChildScrollView(\r\n        child: Column(\r\n          // crossAxisAlignment: CrossAxisAlignment.center,\r\n          children: [\r\n            infocard(name, Icons.person),\r\n            infocard(dob, Icons.calendar_today),\r\n            infocard(email, Icons.mail),\r\n            infocard(phone.toString(), Icons.phone),\r\n            // infocard(\"VIT\", Icons.school),\r\n            SizedBox(\r\n              height: 5,\r\n            ),\r\n            List_Criteria,\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Column List_Criteria;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    imagepadtop = MediaQuery.of(context).size.width / 4;\r\n\r\n    void _editprofile() {\r\n      print(finaledu);\r\n      print(finalproject);\r\n      List<EduTag> edutags = [];\r\n      List<ExpTag> exptags = [];\r\n      List<SkillsTag> skitags = [];\r\n      List<ProjectsTag> protags = [];\r\n      List<AchieveTag> achtags = [];\r\n      for (int i = 0; i < finaledu.length; i++) {\r\n        edutags.add(EduTag(\r\n            finaledu[i].degree,\r\n            finaledu[i].institute,\r\n            finaledu[i].from,\r\n            finaledu[i].to,\r\n            finaledu[i].status,\r\n            finaledu[i].description));\r\n      }\r\n      var jsonEdutemp = json.encode(edutags);\r\n      var jsonEdu = jsonDecode(jsonEdutemp);\r\n      for (int i = 0; i < finalexp.length; i++) {\r\n        exptags.add(ExpTag(\r\n            finalexp[i].organization,\r\n            finalexp[i].post,\r\n            finalexp[i].from,\r\n            finalexp[i].to,\r\n            finalexp[i].status,\r\n            finalexp[i].description));\r\n      }\r\n      String jsonExptemp = jsonEncode(exptags);\r\n      var jsonExp = jsonDecode(jsonExptemp);\r\n\r\n      for (int i = 0; i < finalskill.length; i++) {\r\n        skitags.add(SkillsTag(finalskill[i].field, finalskill[i].level));\r\n      }\r\n      String jsonskilltemp = jsonEncode(skitags);\r\n      var jsonskill = jsonDecode(jsonskilltemp);\r\n\r\n      for (int i = 0; i < finalproject.length; i++) {\r\n        protags.add(ProjectsTag(\r\n            finalproject[i].description,\r\n            finalproject[i].status,\r\n            finalproject[i].from,\r\n            finalproject[i].to,\r\n            finalproject[i].link,\r\n            finalproject[i].name));\r\n      }\r\n      String jsonprojecttemp = jsonEncode(protags);\r\n      var jsonproject = jsonDecode(jsonprojecttemp);\r\n\r\n      for (int i = 0; i < finalachieve.length; i++) {\r\n        achtags.add(AchieveTag(\r\n            finalachieve[i].description,\r\n            finalachieve[i].title,\r\n            finalachieve[i].year,\r\n            finalachieve[i].issuer));\r\n      }\r\n      String jsonachivetemp = jsonEncode(achtags);\r\n      var jsonachive = jsonDecode(jsonachivetemp);\r\n\r\n      DateTime selectedDate = DateTime.now();\r\n      _selectDate(BuildContext context) async {\r\n        final DateTime picked = await showDatePicker(\r\n          context: context,\r\n          initialDate: selectedDate, // Refer step 1\r\n          firstDate: DateTime(1900),\r\n          lastDate: DateTime(2050),\r\n        );\r\n        if (picked != null && picked != selectedDate)\r\n          setState(() {\r\n            selectedDate = picked;\r\n            print(\"SELECTED DATE= $selectedDate\");\r\n            var date = DateTime.parse(\"$selectedDate\");\r\n            formattedDate = \"${date.year}-${date.month}-${date.day}\";\r\n\r\n            print (formattedDate);\r\n          });\r\n      }\r\n\r\n      final nameController = TextEditingController();\r\n      final phoneController = TextEditingController();\r\n      final aboutController = TextEditingController();\r\n      final emailController = TextEditingController();\r\n      final dobController = TextEditingController();\r\n\r\n      nameController.text = widget.kname;\r\n      phoneController.text = widget.kphone.toString();\r\n      aboutController.text = widget.kabout;\r\n      emailController.text = widget.kemail;\r\n      dobController.text = widget.kdob;\r\n\r\n      void _UpdateAlert() {\r\n        showDialog(\r\n          context: context, barrierDismissible: false, // user must tap button!\r\n          builder: (BuildContext context) {\r\n            return new AlertDialog(\r\n                title: new Text('Update Profile'),\r\n                content: new SingleChildScrollView(\r\n                    child: Text('The App will restart to update information',\r\n                        style: TextStyle(\r\n                            color: Colors.blue.shade800, fontSize: 23))));\r\n          },\r\n        );\r\n      }\r\n\r\n      void _EducationEnter() {\r\n        TextEditingController degree = TextEditingController();\r\n        TextEditingController institute = TextEditingController();\r\n        TextEditingController from = TextEditingController();\r\n        TextEditingController to = TextEditingController();\r\n        TextEditingController status = TextEditingController();\r\n        TextEditingController desc = TextEditingController();\r\n\r\n        showDialog(\r\n          context: context, barrierDismissible: false, // user must tap button!\r\n          builder: (BuildContext context) {\r\n            return new AlertDialog(\r\n              title: new Text('Enter your education details'),\r\n              content: new SingleChildScrollView(\r\n                child: new ListBody(\r\n                  children: [\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'degree',\r\n                          hintText: 'degree'),\r\n                      controller: degree,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'institute',\r\n                          hintText: 'institute'),\r\n                      controller: institute,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'from',\r\n                          hintText: 'from'),\r\n                      controller: from,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'to',\r\n                          hintText: 'to'),\r\n                      controller: to,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'status',\r\n                          hintText: 'status'),\r\n                      controller: status,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'description',\r\n                          hintText: 'description'),\r\n                      controller: desc,\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n              actions: [\r\n                new FlatButton(\r\n                  child: new Text('Cancel'),\r\n                  onPressed: () {\r\n                    Navigator.of(context).pop();\r\n                  },\r\n                ),\r\n                new FlatButton(\r\n                  child: new Text(\r\n                    'Add',\r\n                    style: TextStyle(\r\n                      fontSize: 15,\r\n                      fontWeight: FontWeight.w700,\r\n                    ),\r\n                  ),\r\n                  onPressed: () {\r\n                    setState(() {\r\n                      edutags.add(EduTag(degree.text, institute.text, from.text,\r\n                          to.text, status.text, desc.text));\r\n                      jsonEdutemp = json.encode(edutags);\r\n                      jsonEdu = jsonDecode(jsonEdutemp);\r\n                      Navigator.of(context).pop();\r\n                    });\r\n                  },\r\n                ),\r\n              ],\r\n            );\r\n          },\r\n        );\r\n      }\r\n\r\n      void _ExperienceEnter() {\r\n        TextEditingController organisation = TextEditingController();\r\n        TextEditingController post = TextEditingController();\r\n        TextEditingController from = TextEditingController();\r\n        TextEditingController to = TextEditingController();\r\n        TextEditingController status = TextEditingController();\r\n        TextEditingController desc = TextEditingController();\r\n\r\n        showDialog(\r\n          context: context, barrierDismissible: false, // user must tap button!\r\n          builder: (BuildContext context) {\r\n            return new AlertDialog(\r\n              title: new Text('Enter your education details'),\r\n              content: new SingleChildScrollView(\r\n                child: new ListBody(\r\n                  children: [\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'Organisation',\r\n                          hintText: 'Organisation'),\r\n                      controller: organisation,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'post',\r\n                          hintText: 'post'),\r\n                      controller: post,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'from',\r\n                          hintText: 'from'),\r\n                      controller: from,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'to',\r\n                          hintText: 'to'),\r\n                      controller: to,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'status',\r\n                          hintText: 'status'),\r\n                      controller: status,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'description',\r\n                          hintText: 'description'),\r\n                      controller: desc,\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n              actions: [\r\n                new FlatButton(\r\n                  child: new Text('Cancel'),\r\n                  onPressed: () {\r\n                    Navigator.of(context).pop();\r\n                  },\r\n                ),\r\n                new FlatButton(\r\n                  child: new Text(\r\n                    'Add',\r\n                    style: TextStyle(\r\n                      fontSize: 15,\r\n                      fontWeight: FontWeight.w700,\r\n                    ),\r\n                  ),\r\n                  onPressed: () {\r\n                    setState(() {\r\n                      exptags.add(ExpTag(organisation.text, post.text,\r\n                          from.text, to.text, status.text, desc.text));\r\n                      jsonExptemp = json.encode(exptags);\r\n                      jsonExp = jsonDecode(jsonExptemp);\r\n                      Navigator.of(context).pop();\r\n                    });\r\n                  },\r\n                ),\r\n              ],\r\n            );\r\n          },\r\n        );\r\n      }\r\n\r\n      void _SkillEnter() {\r\n        TextEditingController field = TextEditingController();\r\n        TextEditingController level = TextEditingController();\r\n\r\n        showDialog(\r\n          context: context, barrierDismissible: false, // user must tap button!\r\n          builder: (BuildContext context) {\r\n            return new AlertDialog(\r\n              title: new Text('Enter your education details'),\r\n              content: new SingleChildScrollView(\r\n                child: new ListBody(\r\n                  children: [\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'field',\r\n                          hintText: 'field'),\r\n                      controller: field,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'level',\r\n                          hintText: 'level'),\r\n                      controller: level,\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n              actions: [\r\n                new FlatButton(\r\n                  child: new Text('Cancel'),\r\n                  onPressed: () {\r\n                    Navigator.of(context).pop();\r\n                  },\r\n                ),\r\n                new FlatButton(\r\n                  child: new Text(\r\n                    'Add',\r\n                    style: TextStyle(\r\n                      fontSize: 15,\r\n                      fontWeight: FontWeight.w700,\r\n                    ),\r\n                  ),\r\n                  onPressed: () {\r\n                    setState(() {\r\n                      skitags.add(SkillsTag(field.text, int.parse(level.text)));\r\n                      jsonskilltemp = json.encode(skitags);\r\n                      jsonskill = jsonDecode(jsonskilltemp);\r\n                      Navigator.of(context).pop();\r\n                    });\r\n                  },\r\n                ),\r\n              ],\r\n            );\r\n          },\r\n        );\r\n      }\r\n\r\n      void _ProjectEnter() {\r\n        TextEditingController link = TextEditingController();\r\n        TextEditingController name = TextEditingController();\r\n        TextEditingController from = TextEditingController();\r\n        TextEditingController to = TextEditingController();\r\n        TextEditingController status = TextEditingController();\r\n        TextEditingController desc = TextEditingController();\r\n\r\n        showDialog(\r\n          context: context, barrierDismissible: false, // user must tap button!\r\n          builder: (BuildContext context) {\r\n            return new AlertDialog(\r\n              title: new Text('Enter your education details'),\r\n              content: new SingleChildScrollView(\r\n                child: new ListBody(\r\n                  children: [\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'name',\r\n                          hintText: 'name'),\r\n                      controller: name,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'link',\r\n                          hintText: 'link'),\r\n                      controller: link,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'from',\r\n                          hintText: 'from'),\r\n                      controller: from,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'to',\r\n                          hintText: 'to'),\r\n                      controller: to,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'status',\r\n                          hintText: 'status'),\r\n                      controller: status,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'description',\r\n                          hintText: 'description'),\r\n                      controller: desc,\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n              actions: [\r\n                new FlatButton(\r\n                  child: new Text('Cancel'),\r\n                  onPressed: () {\r\n                    Navigator.of(context).pop();\r\n                  },\r\n                ),\r\n                new FlatButton(\r\n                  child: new Text(\r\n                    'Add',\r\n                    style: TextStyle(\r\n                      fontSize: 15,\r\n                      fontWeight: FontWeight.w700,\r\n                    ),\r\n                  ),\r\n                  onPressed: () {\r\n                    setState(() {\r\n                      protags.add(ProjectsTag(desc.text, status.text, from.text,\r\n                          to.text, link.text, name.text));\r\n                      jsonprojecttemp = json.encode(protags);\r\n                      jsonproject = jsonDecode(jsonprojecttemp);\r\n                      Navigator.of(context).pop();\r\n                    });\r\n                  },\r\n                ),\r\n              ],\r\n            );\r\n          },\r\n        );\r\n      }\r\n\r\n      void _AchievementEnter() {\r\n        TextEditingController desc = TextEditingController();\r\n        TextEditingController title = TextEditingController();\r\n        TextEditingController year = TextEditingController();\r\n        TextEditingController issuer = TextEditingController();\r\n\r\n        showDialog(\r\n          context: context, barrierDismissible: false, // user must tap button!\r\n          builder: (BuildContext context) {\r\n            return new AlertDialog(\r\n              title: new Text('Enter your education details'),\r\n              content: new SingleChildScrollView(\r\n                child: new ListBody(\r\n                  children: [\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'title',\r\n                          hintText: 'title'),\r\n                      controller: title,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'year',\r\n                          hintText: 'year'),\r\n                      controller: year,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'issuer',\r\n                          hintText: 'issuer'),\r\n                      controller: issuer,\r\n                    ),\r\n                    TextField(\r\n                      decoration: InputDecoration(\r\n                          border: InputBorder.none,\r\n                          labelText: 'description',\r\n                          hintText: 'description'),\r\n                      controller: desc,\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n              actions: [\r\n                new FlatButton(\r\n                  child: new Text('Cancel'),\r\n                  onPressed: () {\r\n                    Navigator.of(context).pop();\r\n                  },\r\n                ),\r\n                new FlatButton(\r\n                  child: new Text(\r\n                    'Add',\r\n                    style: TextStyle(\r\n                      fontSize: 15,\r\n                      fontWeight: FontWeight.w700,\r\n                    ),\r\n                  ),\r\n                  onPressed: () {\r\n                    setState(() {\r\n                      achtags.add(AchieveTag(\r\n                          desc.text, title.text, year.text, issuer.text));\r\n                      jsonachivetemp = json.encode(achtags);\r\n                      jsonachive = jsonDecode(jsonachivetemp);\r\n                      Navigator.of(context).pop();\r\n                    });\r\n                  },\r\n                ),\r\n              ],\r\n            );\r\n          },\r\n        );\r\n      }\r\n\r\n      void updateprofile() async {\r\n        print(\"HALOTAGS====${edutags.toString()}\");\r\n        print(\"HALO====${jsonEdu.toString()}\");\r\n        bool signin_method;\r\n        if (login.super_signin == 0) {\r\n          signin_method = true;\r\n        } else {\r\n          signin_method = false;\r\n        }\r\n        var dio = Dio();\r\n        dio.options.headers['content-Type'] = 'application/json';\r\n        dio.options.headers[\"x-auth-token\"] = \"$token\";\r\n        Map data = {\r\n          \"name\": nameController.text,\r\n          \"about\": aboutController.text,\r\n          \"picture\": widget.kimage,\r\n          \"email\": emailController.text,\r\n          \"phone\": phoneController.text,\r\n          \"dob\": formattedDate,\r\n          \"education\": jsonEdu,\r\n          \"achievements\": jsonachive,\r\n          \"skills\": jsonskill,\r\n          \"projects\": jsonproject,\r\n          \"experience\": jsonExp,\r\n          \"google\": signin_method,\r\n        };\r\n        Map finaldata = {\"profile\": data};\r\n        print(\"FINAL DATA\");\r\n        print(finaldata);\r\n        // var jsonfinaldata = jsonEncode(finaldata);\r\n        // print(\"DO NOT FINAL JSON DATA\");\r\n\r\n        // print(jsonfinaldata);\r\n        try {\r\n          print(\"SUPER TRY\");\r\n          Response response = await dio.put(\r\n            \"https://us-central1-fyi-vitc.cloudfunctions.net/api/profile\",\r\n            data: finaldata,\r\n          );\r\n          var result = response.data;\r\n          print(result);\r\n        } catch (e) {\r\n          print(e);\r\n          print(\"ERROR\");\r\n        }\r\n      }\r\n\r\n      showDialog(\r\n        context: context, barrierDismissible: false, // user must tap button!\r\n        builder: (BuildContext context) {\r\n          return new AlertDialog(\r\n            insetPadding: EdgeInsets.all(5),\r\n            title: new Text('Edit profile'),\r\n            content: Container(\r\n              height: MediaQuery.of(context).size.width,\r\n              width: MediaQuery.of(context).size.width,\r\n              child: SingleChildScrollView(\r\n                child: Column(\r\n                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                  children: [\r\n                    Text(\r\n                      \"Name\",\r\n                      style: TextStyle(fontWeight: FontWeight.bold),\r\n                    ),\r\n                    TextField(\r\n                      controller: nameController,\r\n                    ),\r\n                    SizedBox(\r\n                      height: 10,\r\n                    ),\r\n                    Text(\"Phone\",\r\n                        style: TextStyle(fontWeight: FontWeight.bold)),\r\n                    TextField(\r\n                      controller: phoneController,\r\n                    ),\r\n                    SizedBox(\r\n                      height: 10,\r\n                    ),\r\n                    Text(\"About\",\r\n                        style: TextStyle(fontWeight: FontWeight.bold)),\r\n                    TextField(\r\n                      maxLines: 5,\r\n                      controller: aboutController,\r\n                    ),\r\n                    SizedBox(\r\n                      height: 10,\r\n                    ),\r\n                    Text(\"Date of Birth\",\r\n                        style: TextStyle(fontWeight: FontWeight.bold)),\r\n                    FlatButton(\r\n                        onPressed: () {\r\n                          setState(() {\r\n                            _selectDate(context);\r\n                          });\r\n                        },\r\n                        child: Text(\"Click to view and change\",\r\n                            style: TextStyle(fontWeight: FontWeight.bold))),\r\n                    SizedBox(\r\n                      height: 10,\r\n                    ),\r\n                    Row(\r\n                      children: [\r\n                        Text(\"Education\",\r\n                            style: TextStyle(fontWeight: FontWeight.bold)),\r\n                        FlatButton(\r\n                          child: Icon(\r\n                            Icons.add,\r\n                            size: 40,\r\n                            color: Colors.black,\r\n                          ),\r\n                          onPressed: () {\r\n                            _EducationEnter();\r\n                          },\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    Container(\r\n                      padding: EdgeInsets.symmetric(vertical: 10),\r\n                      decoration: BoxDecoration(\r\n                          borderRadius: BorderRadius.all(Radius.circular(20)),\r\n                          color: Colors.grey.shade100),\r\n                      height: eduHeight,\r\n                      child: ListView.builder(\r\n                        itemBuilder: (context, index) {\r\n                          Widget widget = educationexpandlist.elementAt(index);\r\n                          return Dismissible(\r\n                              key: ValueKey(educationexpandlist.length),\r\n                              onDismissed: (direction) {\r\n                                setState(() {\r\n                                  educationexpandlist.removeAt(index);\r\n                                  edutags.removeAt(index);\r\n                                  jsonEdutemp = json.encode(edutags);\r\n                                  jsonEdu = jsonDecode(jsonEdutemp);\r\n                                  if (educationexpandlist.length == 0) {\r\n                                    eduHeight = 0;\r\n                                    print(\"SET ZERO\");\r\n                                  }\r\n                                });\r\n                              },\r\n                              background: Container(\r\n                                color: Colors.red.shade800,\r\n                                padding: EdgeInsets.symmetric(horizontal: 20),\r\n                                alignment: AlignmentDirectional.centerStart,\r\n                                child: Icon(\r\n                                  Icons.delete,\r\n                                  size: 50,\r\n                                  color: Colors.white,\r\n                                ),\r\n                              ),\r\n                              child: ListTile(title: widget),\r\n                            );\r\n                        },\r\n                        itemCount: educationexpandlist.length,\r\n                      ),\r\n                    ),\r\n                    SizedBox(\r\n                      height: 10,\r\n                    ),\r\n                    Row(\r\n                      children: [\r\n                        Text(\"Experience\",\r\n                            style: TextStyle(fontWeight: FontWeight.bold)),\r\n                        FlatButton(\r\n                          child: Icon(\r\n                            Icons.add,\r\n                            size: 40,\r\n                            color: Colors.black,\r\n                          ),\r\n                          onPressed: () {\r\n                            _ExperienceEnter();\r\n                          },\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    Container(\r\n                      padding: EdgeInsets.symmetric(vertical: 10),\r\n                      decoration: BoxDecoration(\r\n                          borderRadius: BorderRadius.all(Radius.circular(20)),\r\n                          color: Colors.grey.shade100),\r\n                      height: eduHeight,\r\n                      child: ListView.builder(\r\n                        cacheExtent: 2000000,\r\n                        addAutomaticKeepAlives: true,\r\n                        addRepaintBoundaries: false,\r\n                        itemBuilder: (context, index) {\r\n                          Widget widget = experienceexpandlist.elementAt(index);\r\n                          return Dismissible(\r\n                              key: ValueKey(experienceexpandlist.length),\r\n\r\n                              onDismissed: (direction) {\r\n                                // delete_count = delete_count + 1;\r\n                                setState(() {\r\n                                  experienceexpandlist.removeAt(index);\r\n                                  exptags.removeAt(index);\r\n                                  jsonExptemp = jsonEncode(exptags);\r\n                                  jsonExp = jsonDecode(jsonExptemp);\r\n                                  if (experienceexpandlist.length == 0) {\r\n                                    expHeight = 0;\r\n                                  }\r\n                                });\r\n                              },\r\n                              // Show a red background as the item is swiped away.\r\n                              // background: Container(color: Colors.red),\r\n                              background: Container(\r\n                                color: Colors.red.shade800,\r\n                                padding: EdgeInsets.symmetric(horizontal: 20),\r\n                                alignment: AlignmentDirectional.centerStart,\r\n                                child: Icon(\r\n                                  Icons.delete,\r\n                                  size: 40,\r\n                                  color: Colors.white,\r\n                                ),\r\n                              ),\r\n                              child: ListTile(title: widget),\r\n                            );\r\n                        },\r\n                        itemCount: experienceexpandlist.length,\r\n                      ),\r\n                    ),\r\n                    SizedBox(\r\n                      height: 10,\r\n                    ),\r\n                    Row(\r\n                      children: [\r\n                        Text(\"Achievements\",\r\n                            style: TextStyle(fontWeight: FontWeight.bold)),\r\n                        FlatButton(\r\n                          child: Icon(\r\n                            Icons.add,\r\n                            size: 40,\r\n                            color: Colors.black,\r\n                          ),\r\n                          onPressed: () {\r\n                            _AchievementEnter();\r\n                          },\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    Container(\r\n                      padding: EdgeInsets.symmetric(vertical: 10),\r\n                      decoration: BoxDecoration(\r\n                          borderRadius: BorderRadius.all(Radius.circular(20)),\r\n                          color: Colors.grey.shade100),\r\n                      height: achHeight,\r\n                      child: ListView.builder(\r\n                        cacheExtent: 2000000,\r\n                        addAutomaticKeepAlives: true,\r\n                        addRepaintBoundaries: false,\r\n                        itemBuilder: (context, index) {\r\n                          Widget widget =\r\n                              achievementexpandlist.elementAt(index);\r\n                          return  Dismissible(\r\n                              key: ValueKey(achievementexpandlist.length),\r\n\r\n                              onDismissed: (direction) {\r\n                                // delete_count = delete_count + 1;\r\n                                setState(() {\r\n                                  achievementexpandlist.removeAt(index);\r\n                                  achtags.removeAt(index);\r\n                                  jsonachivetemp = jsonEncode(achtags);\r\n                                  jsonachive = jsonDecode(jsonachivetemp);\r\n                                  if (achievementexpandlist.length == 0) {\r\n                                    expHeight = 0;\r\n                                  }\r\n                                });\r\n                              },\r\n                              // Show a red background as the item is swiped away.\r\n                              // background: Container(color: Colors.red),\r\n                              background: Container(\r\n                                color: Colors.red.shade800,\r\n                                padding: EdgeInsets.symmetric(horizontal: 20),\r\n                                alignment: AlignmentDirectional.centerStart,\r\n                                child: Icon(\r\n                                  Icons.delete,\r\n                                  size: 50,\r\n                                  color: Colors.white,\r\n                                ),\r\n                              ),\r\n                              child: ListTile(title: widget),\r\n                            );\r\n                        },\r\n                        itemCount: achievementexpandlist.length,\r\n                      ),\r\n                    ),\r\n                    SizedBox(\r\n                      height: 10,\r\n                    ),\r\n                    Row(\r\n                      children: [\r\n                        Text(\"Skills\",\r\n                            style: TextStyle(fontWeight: FontWeight.bold)),\r\n                        FlatButton(\r\n                          child: Icon(\r\n                            Icons.add,\r\n                            size: 40,\r\n                            color: Colors.black,\r\n                          ),\r\n                          onPressed: () {\r\n                            _SkillEnter();\r\n                          },\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    Container(\r\n                      padding: EdgeInsets.symmetric(vertical: 10),\r\n                      decoration: BoxDecoration(\r\n                          borderRadius: BorderRadius.all(Radius.circular(20)),\r\n                          color: Colors.grey.shade100),\r\n                      height: skiHeight,\r\n                      child: ListView.builder(\r\n                        cacheExtent: 2000000,\r\n                        addAutomaticKeepAlives: true,\r\n                        addRepaintBoundaries: false,\r\n                        itemBuilder: (context, index) {\r\n                          Widget widget = skillexpandlist.elementAt(index);\r\n                          return  Dismissible(\r\n                              key: ValueKey(skillexpandlist.length),\r\n\r\n                              onDismissed: (direction) {\r\n                                setState(() {\r\n                                  skillexpandlist.removeAt(index);\r\n                                  skitags.removeAt(index);\r\n                                   jsonskilltemp = jsonEncode(skitags);\r\n                                   jsonskill = jsonDecode(jsonskilltemp);\r\n                                  if (skillexpandlist.length == 0) {\r\n                                    expHeight = 0;\r\n                                  }\r\n                                });\r\n                              },\r\n                              // Show a red background as the item is swiped away.\r\n                              // background: Container(color: Colors.red),\r\n                              background: Container(\r\n                                color: Colors.red.shade800,\r\n                                padding: EdgeInsets.symmetric(horizontal: 20),\r\n                                alignment: AlignmentDirectional.centerStart,\r\n                                child: Icon(\r\n                                  Icons.delete,\r\n                                  size: 50,\r\n                                  color: Colors.white,\r\n                                ),\r\n                              ),\r\n                              child: ListTile(title: widget),\r\n                            );\r\n                        },\r\n                        itemCount: skillexpandlist.length,\r\n                      ),\r\n                    ),\r\n                    SizedBox(\r\n                      height: 10,\r\n                    ),\r\n                    Row(\r\n                      children: [\r\n                        Text(\"Projects\",\r\n                            style: TextStyle(fontWeight: FontWeight.bold)),\r\n                        FlatButton(\r\n                          child: Icon(\r\n                            Icons.add,\r\n                            size: 40,\r\n                            color: Colors.black,\r\n                          ),\r\n                          onPressed: () {\r\n                            _ProjectEnter();\r\n                          },\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    Container(\r\n                      padding: EdgeInsets.symmetric(vertical: 10),\r\n                      decoration: BoxDecoration(\r\n                          borderRadius: BorderRadius.all(Radius.circular(20)),\r\n                          color: Colors.grey.shade100),\r\n                      height: proHeight,\r\n                      child: ListView.builder(\r\n                        cacheExtent: 2000000,\r\n                        addAutomaticKeepAlives: true,\r\n                        addRepaintBoundaries: false,\r\n                        itemBuilder: (context, index) {\r\n                          Widget widget = projectexpandlist.elementAt(index);\r\n                          return  Dismissible(\r\n                              key: ValueKey(projectexpandlist.length),\r\n\r\n                              onDismissed: (direction) {\r\n                                // delete_count = delete_count + 1;\r\n                                setState(() {\r\n                                  projectexpandlist.removeAt(index);\r\n                                  protags.removeAt(index);\r\n                                  jsonprojecttemp = jsonEncode(protags);\r\n                                  jsonproject = jsonDecode(jsonprojecttemp);\r\n                                  if (projectexpandlist.length == 0) {\r\n                                    expHeight = 0;\r\n                                  }\r\n                                });\r\n                              },\r\n                              // Show a red background as the item is swiped away.\r\n                              // background: Container(color: Colors.red),\r\n                              background: Container(\r\n                                color: Colors.red.shade800,\r\n                                padding: EdgeInsets.symmetric(horizontal: 20),\r\n                                alignment: AlignmentDirectional.centerStart,\r\n                                child: Icon(\r\n                                  Icons.delete,\r\n                                  size: 50,\r\n                                  color: Colors.white,\r\n                                ),\r\n                              ),\r\n                              child: ListTile(title: widget),\r\n                            );\r\n                        },\r\n                        itemCount: projectexpandlist.length,\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n            actions: [\r\n              new FlatButton(\r\n                child: new Text('Nah, I\\'d like to keep it'),\r\n                onPressed: () {\r\n                  Navigator.of(context).pop();\r\n                },\r\n              ),\r\n              new FlatButton(\r\n                child: new Text(\r\n                  'Save Changes',\r\n                  style: TextStyle(\r\n                      fontSize: 15,\r\n                      fontWeight: FontWeight.w700,\r\n                      color: Colors.blue.shade700),\r\n                ),\r\n                onPressed: () async {\r\n                  await updateprofile();\r\n                  // await _UpdateAlert();\r\n                  setState(() {\r\n                    Navigator.push(\r\n                      context,\r\n                      MaterialPageRoute(builder: (context) => LoadingScreen()),  //change\r\n                    );\r\n                  });\r\n                },\r\n              ),\r\n            ],\r\n          );\r\n        },\r\n      );\r\n    }\r\n\r\n    return WillPopScope(child: SafeArea(\r\n      child: Scaffold(\r\n        backgroundColor: Colors.white,\r\n        body: SingleChildScrollView(\r\n          child: Column(\r\n            children: [\r\n              Stack(\r\n                alignment: Alignment.topCenter,\r\n                children: [\r\n                  CustomPaint(\r\n                    child: Container(),\r\n                    painter: HeaderCurvedContainer(),\r\n                  ),\r\n                  Row(\r\n                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                    children: [\r\n                      FlatButton(\r\n                          onPressed: () {\r\n                            setState(() {\r\n                              Navigator.pop(context);\r\n\r\n                            });\r\n                          },\r\n                          child: Row(\r\n                            children: [\r\n                              Icon(\r\n                                Icons.arrow_back_rounded,\r\n                                color: Colors.white,\r\n                              ),\r\n                              SizedBox(\r\n                                width: 8,\r\n                              ),\r\n                              Text(\r\n                                \"Back\",\r\n                                style: TextStyle(color: Colors.white),\r\n                              ),\r\n                            ],\r\n                          )),\r\n                      FlatButton(\r\n                          onPressed: () {\r\n                            setState(() {\r\n                              _editprofile();\r\n                            });\r\n                          },\r\n                          child: Row(\r\n                            children: [\r\n                              Icon(\r\n                                Icons.edit,\r\n                                color: Colors.white,\r\n                              ),\r\n                              SizedBox(\r\n                                width: 8,\r\n                              ),\r\n                              Text(\r\n                                \"EDIT\",\r\n                                style: TextStyle(color: Colors.white),\r\n                              ),\r\n                            ],\r\n                          )),\r\n                    ],\r\n                  ),\r\n                  _circleAvatar(),\r\n                ],\r\n              ),\r\n              _profileText(),\r\n              // FlatButton(\r\n              //     onPressed: () {\r\n              //       setState(() {\r\n              //         _editprofile();\r\n              //       });\r\n              //     },\r\n              //     child: Row(\r\n              //       children: [\r\n              //         Icon(\r\n              //           Icons.edit,\r\n              //           color: Colors.black,\r\n              //         ),\r\n              //         Text(\"EDIT\"),\r\n              //       ],\r\n              //     )),\r\n              // _circleAvatar(),\r\n              _textFormFieldCalling(),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    ), onWillPop: ()async{    Navigator.of(context).push(\r\n      MaterialPageRoute(\r\n        builder: (context) {\r\n          return Testing(username,about,dob,finaledu,email,finalexp,image,name,phone,finalskill,experienceexpandlist,skillexpandlist,educationexpandlist,achievementexpandlist,projectexpandlist,finalachievement,finalproject); //TODO:FB\r\n        },\r\n      ),\r\n    );\r\n    return true;});\r\n  }\r\n}\r\n\r\nclass infocard extends StatelessWidget {\r\n  String data;\r\n  IconData icon;\r\n  infocard(this.data, this.icon);\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Material(\r\n      shadowColor: Colors.grey,\r\n      shape: RoundedRectangleBorder(\r\n        borderRadius: BorderRadius.circular(\r\n          4,\r\n        ),\r\n      ),\r\n      child: Container(\r\n        decoration: BoxDecoration(\r\n          color: Colors.white,\r\n          borderRadius: BorderRadius.circular(\r\n            10,\r\n          ),\r\n          // color: Colors.blue\r\n        ),\r\n        width: MediaQuery.of(context).size.width,\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(15.0),\r\n          child: Row(\r\n            children: [\r\n              Icon(\r\n                icon,\r\n                color: Theme.of(context).primaryColor,\r\n              ),\r\n              SizedBox(\r\n                width: 35,\r\n              ),\r\n              Text(\r\n                data,\r\n                style: TextStyle(\r\n                    fontSize: 18,\r\n                    fontWeight: FontWeight.w300,\r\n                    color: Colors.black),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n//Color(0xff555555)\r\nclass HeaderCurvedContainer extends CustomPainter {\r\n  @override\r\n  void paint(Canvas canvas, Size size) {\r\n    Paint paint = Paint()..color = const Color(0xff3466aa);\r\n    Path path = Path()\r\n      ..relativeLineTo(0, 150)\r\n      ..quadraticBezierTo(size.width / 2, 250.0, size.width, 150)\r\n      ..relativeLineTo(0, -150)\r\n      ..close();\r\n    canvas.drawPath(path, paint);\r\n  }\r\n\r\n  @override\r\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../fyi_main2_2_1/lib/profilepage.dart	(revision 01609a628dd3651861a26bb4612dfd9f895776e1)
+++ ../fyi_main2_2_1/lib/profilepage.dart	(date 1616999806623)
@@ -32,7 +32,7 @@
 var skillsJson;
 var projectsJson;
 var dob;
-var phone;
+String phone;
 var name;
 var achievementsJson;
 var image;
@@ -190,6 +190,10 @@
     image = widget.kimage;
     email = widget.kemail;
     dob = widget.kdob;
+    if(dob==null)
+      {
+        dob=" ";
+      }
     about = widget.kabout;
     finaledu = widget.kedulist;
     finalskill = widget.kskilllist;
@@ -456,10 +460,17 @@
       }
       String jsonExptemp = jsonEncode(exptags);
       var jsonExp = jsonDecode(jsonExptemp);
-
-      for (int i = 0; i < finalskill.length; i++) {
-        skitags.add(SkillsTag(finalskill[i].field, finalskill[i].level));
+      try{
+        for (int i = 0; i < finalskill.length; i++) {
+          skitags.add(SkillsTag(finalskill[i].field, int.parse(finalskill[i].level)));
+        }
+      }
+      catch(e){
+        for (int i = 0; i < finalskill.length; i++) {
+          skitags.add(SkillsTag(finalskill[i].field,finalskill[i].level));
+        }
       }
+
       String jsonskilltemp = jsonEncode(skitags);
       var jsonskill = jsonDecode(jsonskilltemp);
 
@@ -1407,8 +1418,11 @@
                       FlatButton(
                           onPressed: () {
                             setState(() {
-                              Navigator.pop(context);
-
+                              // Navigator.pop(context);
+                              Navigator.push(
+                                context,
+                                MaterialPageRoute(builder: (context) => Testing(username,about,dob,finaledu,email,finalexp,image,name,phone,finalskill,experienceexpandlist,skillexpandlist,educationexpandlist,achievementexpandlist,projectexpandlist,finalachievement,finalproject)),  //change
+                              );
                             });
                           },
                           child: Row(
@@ -1430,6 +1444,7 @@
                           onPressed: () {
                             setState(() {
                               _editprofile();
+
                             });
                           },
                           child: Row(
